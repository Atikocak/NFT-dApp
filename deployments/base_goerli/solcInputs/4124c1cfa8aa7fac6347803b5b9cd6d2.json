{
  "language": "Solidity",
  "sources": {
    "contracts/ERC721Psi.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Author: @atibaba.eth\n\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"solidity-bits/contracts/BitMaps.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints and transfers of Non-Fungible Tokens.\n *\n * Assumes serials are sequentially minted starting at 1 (e.g. 1, 2, 3, 4..).\n *\n * Supports burning tokens to address(0).\n */\ncontract ERC721Psi is\n  Context,\n  ERC165,\n  IERC721,\n  IERC721Metadata,\n  IERC721Enumerable,\n  Pausable\n{\n  using Address for address;\n  using Strings for uint256;\n  using BitMaps for BitMaps.BitMap;\n\n  BitMaps.BitMap private _batchHead;\n  BitMaps.BitMap private _burnedToken;\n  uint256 private currentIndex = 1; // to start token indexing from the given number\n\n  // Token name\n  string private _name;\n  // Token symbol\n  string private _symbol;\n  // Mapping from token ID to ownership details\n  mapping(uint256 => address) internal _owners;\n  // Mint amount for ownership details\n  uint256 internal _minted;\n  // Mapping from token ID to approved address\n  mapping(uint256 => address) private _tokenApprovals;\n  // Mapping from owner to operator approvals\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n  /**\n   * @dev\n   * Initializes the contract by setting the constructor parameters including\n   `name` and `symbol` to the token collection;\n   */\n  constructor(string memory name_, string memory symbol_) {\n    _name = name_;\n    _symbol = symbol_;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(bytes4 interfaceId)\n    public\n    view\n    virtual\n    override(ERC165, IERC165)\n    returns (bool)\n  {\n    return\n      interfaceId == type(IERC721).interfaceId ||\n      interfaceId == type(IERC721Metadata).interfaceId ||\n      interfaceId == type(IERC721Enumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev See {IERC721-balanceOf}.\n   */\n  function balanceOf(address owner)\n    public\n    view\n    virtual\n    override\n    returns (uint256)\n  {\n    require(\n      owner != address(0),\n      \"ERC721Psi: balance query for the zero address\"\n    );\n\n    uint256 count;\n    for (uint256 i; i < currentIndex; ++i) {\n      if (_exists(i)) {\n        if (owner == ownerOf(i)) {\n          ++count;\n        }\n      }\n    }\n    return count;\n  }\n\n  /**\n   * @dev See {IERC721-ownerOf}.\n   */\n  function ownerOf(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (address)\n  {\n    (address owner, ) = _ownerAndBatchHeadOf(tokenId);\n    return owner;\n  }\n\n  function _ownerAndBatchHeadOf(uint256 tokenId)\n    internal\n    view\n    returns (address owner, uint256 tokenIdBatchHead)\n  {\n    require(_exists(tokenId), \"ERC721Psi: owner query for nonexistent token\");\n    tokenIdBatchHead = _getBatchHead(tokenId);\n    owner = _owners[tokenIdBatchHead];\n  }\n\n  /**\n   * @dev See {IERC721Metadata-name}.\n   */\n  function name() public view virtual override returns (string memory) {\n    return _name;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-symbol}.\n   */\n  function symbol() public view virtual override returns (string memory) {\n    return _symbol;\n  }\n\n  /**\n   * @dev See {IERC721Metadata-tokenURI}.\n   */\n  function tokenURI(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (string memory)\n  {\n    require(_exists(tokenId), \"ERC721Psi: URI query for nonexistent token\");\n\n    string memory baseURI = _baseURI();\n    return\n      bytes(baseURI).length > 0\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\n        : \"\";\n  }\n\n  /**\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n   * by default, can be overriden in child contracts.\n   */\n  function _baseURI() internal view virtual returns (string memory) {\n    return \"\";\n  }\n\n  /**\n   * @dev See {IERC721-approve}.\n   */\n  function approve(address to, uint256 tokenId) public virtual override {\n    address owner = ownerOf(tokenId);\n    require(to != owner, \"ERC721Psi: approval to current owner\");\n\n    require(\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n      \"ERC721Psi: approve caller is not owner nor approved for all\"\n    );\n\n    _approve(to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-getApproved}.\n   */\n  function getApproved(uint256 tokenId)\n    public\n    view\n    virtual\n    override\n    returns (address)\n  {\n    require(\n      _exists(tokenId),\n      \"ERC721Psi: approved query for nonexistent token\"\n    );\n\n    return _tokenApprovals[tokenId];\n  }\n\n  /**\n   * @dev See {IERC721-setApprovalForAll}.\n   */\n  function setApprovalForAll(address operator, bool approved)\n    public\n    virtual\n    override\n  {\n    require(operator != _msgSender(), \"ERC721Psi: approve to caller\");\n\n    _operatorApprovals[_msgSender()][operator] = approved;\n    emit ApprovalForAll(_msgSender(), operator, approved);\n  }\n\n  /**\n   * @dev See {IERC721-isApprovedForAll}.\n   */\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    virtual\n    override\n    returns (bool)\n  {\n    return _operatorApprovals[owner][operator];\n  }\n\n  /**\n   * @dev See {IERC721-transferFrom}.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    //solhint-disable-next-line max-line-length\n    require(\n      _isApprovedOrOwner(_msgSender(), tokenId),\n      \"ERC721Psi: transfer caller is not owner nor approved\"\n    );\n    _transfer(from, to, tokenId);\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId\n  ) public virtual override {\n    safeTransferFrom(from, to, tokenId, \"\");\n  }\n\n  /**\n   * @dev See {IERC721-safeTransferFrom}.\n   */\n  function safeTransferFrom(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) public virtual override {\n    require(\n      _isApprovedOrOwner(_msgSender(), tokenId),\n      \"ERC721Psi: transfer caller is not owner nor approved\"\n    );\n    _safeTransfer(from, to, tokenId, _data);\n  }\n\n  /**\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n   *\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n   *\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\n   *\n   * Requirements:\n   *\n   * - `from` cannot be the zero address.\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must exist and be owned by `from`.\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _safeTransfer(\n    address from,\n    address to,\n    uint256 tokenId,\n    bytes memory _data\n  ) internal virtual {\n    _transfer(from, to, tokenId);\n    require(\n      _checkOnERC721Received(from, to, tokenId, 1, _data),\n      \"ERC721Psi: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  /**\n   * @dev Returns whether `tokenId` exists.\n   *\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n   *\n   * Tokens start existing when they are minted (`_mint`),\n   */\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\n    if (_burnedToken.get(tokenId) || tokenId == 0) {\n      return false;\n    }\n    return tokenId < currentIndex;\n  }\n\n  /**\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   */\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\n    internal\n    view\n    virtual\n    returns (bool)\n  {\n    require(\n      _exists(tokenId),\n      \"ERC721Psi: operator query for nonexistent token\"\n    );\n    address owner = ownerOf(tokenId);\n    return (spender == owner ||\n      getApproved(tokenId) == spender ||\n      isApprovedForAll(owner, spender));\n  }\n\n  /**\n   * @dev Mints `quantity` tokens and transfers them to `to`.\n   *\n   * Requirements:\n   *\n   * - there must be `quantity` tokens remaining unminted in the total collection.\n   * - `to` cannot be the zero address.\n   * - `quantity` cannot be larger than the max batch size.\n   *\n   * Emits a {Transfer} event.\n   */\n\n  function _safeMint(address to, uint256 quantity) internal virtual {\n    _safeMint(to, quantity, \"\");\n  }\n\n  function _safeMint(\n    address to,\n    uint256 quantity,\n    bytes memory _data\n  ) internal virtual {\n    uint256 startTokenId = currentIndex;\n    _mint(to, quantity);\n    require(\n      _checkOnERC721Received(address(0), to, startTokenId, quantity, _data),\n      \"ERC721Psi: transfer to non ERC721Receiver implementer\"\n    );\n  }\n\n  function _mint(address to, uint256 quantity) internal virtual {\n    uint256 tokenIdBatchHead = currentIndex;\n\n    require(quantity > 0, \"ERC721Psi: quantity must be greater than zero\");\n    require(to != address(0), \"ERC721Psi: mint to the zero address\");\n\n    _beforeTokenTransfers(address(0), to, tokenIdBatchHead, quantity);\n    _minted += quantity;\n    _owners[tokenIdBatchHead] = to;\n    _batchHead.set(tokenIdBatchHead);\n    _afterTokenTransfers(address(0), to, tokenIdBatchHead, quantity);\n\n    // Emit events\n    for (\n      uint256 tokenId = tokenIdBatchHead;\n      tokenId < tokenIdBatchHead + quantity;\n      tokenId++\n    ) {\n      emit Transfer(address(0), to, tokenId);\n      currentIndex = tokenId + 1;\n    }\n  }\n\n  /**\n   * @dev Destroys `tokenId`.\n   * The approval is cleared when the token is burned.\n   *\n   * Requirements:\n   *\n   * - `tokenId` must exist.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _burn(uint256 tokenId) internal virtual {\n    address from = ownerOf(tokenId);\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\n    _burnedToken.set(tokenId);\n\n    emit Transfer(from, address(0), tokenId);\n\n    _afterTokenTransfers(from, address(0), tokenId, 1);\n  }\n\n  /**\n   * @dev Transfers `tokenId` from `from` to `to`.\n   *\n   * Requirements:\n   *\n   * - `to` cannot be the zero address.\n   * - `tokenId` token must be owned by `from`.\n   *\n   * Emits a {Transfer} event.\n   */\n  function _transfer(\n    address from,\n    address to,\n    uint256 tokenId\n  ) internal virtual whenNotPaused {\n    (address owner, uint256 tokenIdBatchHead) = _ownerAndBatchHeadOf(tokenId);\n\n    require(owner == from, \"ERC721Psi: transfer of token that is not own\");\n    require(to != address(0), \"ERC721Psi: transfer to the zero address\");\n\n    _beforeTokenTransfers(from, to, tokenId, 1);\n\n    // Clear approvals from the previous owner\n    _approve(address(0), tokenId);\n\n    uint256 nextTokenId = tokenId + 1;\n\n    if (!_batchHead.get(nextTokenId) && nextTokenId < currentIndex) {\n      _owners[nextTokenId] = from;\n      _batchHead.set(nextTokenId);\n    }\n\n    _owners[tokenId] = to;\n    if (tokenId != tokenIdBatchHead) {\n      _batchHead.set(tokenId);\n    }\n\n    emit Transfer(from, to, tokenId);\n\n    _afterTokenTransfers(from, to, tokenId, 1);\n  }\n\n  /**\n   * @dev Approve `to` to operate on `tokenId`\n   *\n   * Emits a {Approval} event.\n   */\n  function _approve(address to, uint256 tokenId) internal virtual {\n    _tokenApprovals[tokenId] = to;\n    emit Approval(ownerOf(tokenId), to, tokenId);\n  }\n\n  /**\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n   * The call is not executed if the target address is not a contract.\n   *\n   * @param from address representing the previous owner of the given token ID\n   * @param to target address that will receive the tokens\n   * @param startTokenId uint256 the first ID of the tokens to be transferred\n   * @param quantity uint256 amount of the tokens to be transfered.\n   * @param _data bytes optional data to send along with the call\n   * @return r bool whether the call correctly returned the expected magic value\n   */\n  function _checkOnERC721Received(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity,\n    bytes memory _data\n  ) private returns (bool r) {\n    if (to.isContract()) {\n      r = true;\n      for (\n        uint256 tokenId = startTokenId;\n        tokenId < startTokenId + quantity;\n        tokenId++\n      ) {\n        try\n          IERC721Receiver(to).onERC721Received(\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n          )\n        returns (bytes4 retval) {\n          r = r && retval == IERC721Receiver.onERC721Received.selector;\n        } catch (bytes memory reason) {\n          if (reason.length == 0) {\n            revert(\"ERC721Psi: transfer to non ERC721Receiver implementer\");\n          } else {\n            assembly {\n              revert(add(32, reason), mload(reason))\n            }\n          }\n        }\n      }\n      return r;\n    } else {\n      return true;\n    }\n  }\n\n  function _getBatchHead(uint256 tokenId)\n    internal\n    view\n    returns (uint256 tokenIdBatchHead)\n  {\n    tokenIdBatchHead = _batchHead.scanForward(tokenId);\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-totalSupply}.\n   */\n  function totalSupply() public view override returns (uint256) {\n    return _minted - _burned();\n  }\n\n  /**\n   * @dev Returns number of token burned.\n   */\n  function _burned() internal view returns (uint256 burned) {\n    uint256 totalBucket = (_minted >> 8) + 1;\n\n    for (uint256 i = 0; i < totalBucket; i++) {\n      uint256 bucket = _burnedToken.getBucket(i);\n      burned += _popcount(bucket);\n    }\n  }\n\n  /**\n   * @dev Returns number of set bits.\n   */\n  function _popcount(uint256 x) private pure returns (uint256 count) {\n    unchecked {\n      for (count = 0; x != 0; count++) x &= x - 1;\n    }\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenByIndex}.\n   */\n  function tokenByIndex(uint256 index)\n    public\n    view\n    override\n    returns (uint256 tokenId)\n  {\n    require(index < totalSupply(), \"ERC721Psi: global index out of bounds\");\n\n    uint256 count;\n    for (uint256 i; i < currentIndex; i++) {\n      if (_exists(i)) {\n        if (count == index) return i;\n        else count++;\n      }\n    }\n  }\n\n  /**\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n   */\n  function tokenOfOwnerByIndex(address owner, uint256 index)\n    public\n    view\n    virtual\n    override\n    returns (uint256 tokenId)\n  {\n    uint256 count;\n    for (uint256 i; i < currentIndex; i++) {\n      if (_exists(i) && owner == ownerOf(i)) {\n        if (count == index) return i;\n        else count++;\n      }\n    }\n    revert(\"ERC721Psi: owner index out of bounds\");\n  }\n\n  /**\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n   * transferred to `to`.\n   * - When `from` is zero, `tokenId` will be minted for `to`.\n   */\n  function _beforeTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n\n  /**\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\n   * minting.\n   *\n   * startTokenId - the first token id to be transferred\n   * quantity - the amount to be transferred\n   *\n   * Calling conditions:\n   *\n   * - when `from` and `to` are both non-zero.\n   * - `from` and `to` are never both zero.\n   */\n  function _afterTokenTransfers(\n    address from,\n    address to,\n    uint256 startTokenId,\n    uint256 quantity\n  ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "solidity-bits/contracts/BitMaps.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n   _____       ___     ___ __           ____  _ __      \n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\n  \\__ \\/ __ \\/ / / __  / / __/ / / /  / __  / / __/ ___/\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \n/____/\\____/_/_/\\__,_/_/\\__/\\__, /  /_____/_/\\__/____/  \n                           /____/                        \n\n- npm: https://www.npmjs.com/package/solidity-bits\n- github: https://github.com/estarriolvetch/solidity-bits\n\n */\npragma solidity ^0.8.0;\n\nimport \"./BitScan.sol\";\n\n/**\n * @dev This Library is a modified version of Openzeppelin's BitMaps library.\n * Functions of finding the index of the closest set bit from a given index are added.\n * The indexing of each bucket is modifed to count from the MSB to the LSB instead of from the LSB to the MSB.\n * The modification of indexing makes finding the closest previous set bit more efficient in gas usage.\n*/\n\n/**\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\n */\n\nlibrary BitMaps {\n    using BitScan for uint256;\n    uint256 private constant MASK_INDEX_ZERO = (1 << 255);\n    struct BitMap {\n        mapping(uint256 => uint256) _data;\n    }\n\n    /**\n     * @dev Returns whether the bit at `index` is set.\n     */\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\n        uint256 bucket = index >> 8;\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\n        return bitmap._data[bucket] & mask != 0;\n    }\n\n    /**\n     * @dev Sets the bit at `index` to the boolean `value`.\n     */\n    function setTo(\n        BitMap storage bitmap,\n        uint256 index,\n        bool value\n    ) internal {\n        if (value) {\n            set(bitmap, index);\n        } else {\n            unset(bitmap, index);\n        }\n    }\n\n    /**\n     * @dev Sets the bit at `index`.\n     */\n    function set(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\n        bitmap._data[bucket] |= mask;\n    }\n\n    /**\n     * @dev Unsets the bit at `index`.\n     */\n    function unset(BitMap storage bitmap, uint256 index) internal {\n        uint256 bucket = index >> 8;\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\n        bitmap._data[bucket] &= ~mask;\n    }\n\n    /**\n     * @dev Find the closest index of the set bit before `index`.\n     */\n    function scanForward(BitMap storage bitmap, uint256 index) internal view returns (uint256) {\n        uint256 bucket = index >> 8;\n\n        // index within the bucket\n        uint256 bucketIndex = (index & 0xff);\n\n        // load a bitboard from the bitmap.\n        uint256 bb = bitmap._data[bucket];\n\n        // offset the bitboard to scan from `bucketIndex`.\n        bb = bb >> (0xff ^ bucketIndex); // bb >> (255 - bucketIndex)\n        \n        if(bb > 0) {\n            unchecked {\n                return (bucket << 8) | (bucketIndex -  bb.bitScanForward256());    \n            }\n        } else {\n            while(true) {\n                require(bucket > 0, \"BitMaps: The set bit before the index doesn't exist.\");\n                unchecked {\n                    bucket--;\n                }\n                // No offset. Always scan from the least significiant bit now.\n                bb = bitmap._data[bucket];\n                \n                if(bb > 0) {\n                    unchecked {\n                        return (bucket << 8) | (255 -  bb.bitScanForward256());    \n                    }\n                } \n            }\n        }\n    }\n\n    function getBucket(BitMap storage bitmap, uint256 bucket) internal view returns (uint256) {\n        return bitmap._data[bucket];\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "solidity-bits/contracts/BitScan.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n   _____       ___     ___ __           ____  _ __      \n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\n  \\__ \\/ __ \\/ / / __  / / __/ / / /  / __  / / __/ ___/\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \n/____/\\____/_/_/\\__,_/_/\\__/\\__, /  /_____/_/\\__/____/  \n                           /____/                        \n\n- npm: https://www.npmjs.com/package/solidity-bits\n- github: https://github.com/estarriolvetch/solidity-bits\n\n */\n\npragma solidity ^0.8.0;\n\n\nlibrary BitScan {\n    uint256 constant private DEBRUIJN_256 = 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff;\n    bytes constant private LOOKUP_TABLE_256 = hex\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\";\n\n    /**\n        @dev Isolate the least significant set bit.\n     */ \n    function isolateLS1B256(uint256 bb) pure internal returns (uint256) {\n        require(bb > 0);\n        unchecked {\n            return bb & (0 - bb);\n        }\n    } \n\n    /**\n        @dev Isolate the most significant set bit.\n     */ \n    function isolateMS1B256(uint256 bb) pure internal returns (uint256) {\n        require(bb > 0);\n        unchecked {\n            bb |= bb >> 256;\n            bb |= bb >> 128;\n            bb |= bb >> 64;\n            bb |= bb >> 32;\n            bb |= bb >> 16;\n            bb |= bb >> 8;\n            bb |= bb >> 4;\n            bb |= bb >> 2;\n            bb |= bb >> 1;\n            \n            return (bb >> 1) + 1;\n        }\n    } \n\n    /**\n        @dev Find the index of the lest significant set bit. (trailing zero count)\n     */ \n    function bitScanForward256(uint256 bb) pure internal returns (uint8) {\n        unchecked {\n            return uint8(LOOKUP_TABLE_256[(isolateLS1B256(bb) * DEBRUIJN_256) >> 248]);\n        }   \n    }\n\n    /**\n        @dev Find the index of the most significant set bit.\n     */ \n    function bitScanReverse256(uint256 bb) pure internal returns (uint8) {\n        unchecked {\n            return 255 - uint8(LOOKUP_TABLE_256[((isolateMS1B256(bb) * DEBRUIJN_256) >> 248)]);\n        }   \n    }\n\n    function log2(uint256 bb) pure internal returns (uint8) {\n        unchecked {\n            return uint8(LOOKUP_TABLE_256[(isolateMS1B256(bb) * DEBRUIJN_256) >> 248]);\n        } \n    }\n}"
    },
    "contracts/MyBoredApe.sol": {
      "content": "/*\n     __  ___      ____                      __   ___\n    /  |/  /_  __/ __ )____  ________  ____/ /  /   |  ____  ___\n   / /|_/ / / / / __  / __ \\/ ___/ _ \\/ __  /  / /| | / __ \\/ _ \\\n  / /  / / /_/ / /_/ / /_/ / /  /  __/ /_/ /  / ___ |/ /_/ /  __/\n /_/  /_/\\__, /_____/\\____/_/   \\___/\\__,_/  /_/  |_/ .___/\\___/\n        /____/                                     /_/\n*/\n\n// @created for Fiverr\n// @author atibaba.eth\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"./ERC721Psi.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract MyBoredApe is Pausable, ERC721Psi, Ownable, ReentrancyGuard {\n  using Strings for uint256;\n\n  // Sale configuration at once\n  struct SaleConfig {\n    uint32 auctionSaleStartTime;\n    uint32 publicSaleStartTime;\n    uint64 allowlistPrice;\n    uint64 publicPrice;\n    uint256 publicSaleKey;\n    uint32 auctionSaleAmountLimit;\n    uint32 preSaleAmountPerAddress;\n    uint32 maxAmountPerAddress;\n  }\n\n  // Starting variables\n  SaleConfig public saleConfig;\n  address proxyRegistryAddress;\n  uint256 public maxSupply;\n  uint32 public immutable amountForDevs;\n  bytes32 public root;\n  string private _baseTokenURI;\n  mapping(address => uint256) public _amountMinted;\n\n  // Not changable variables for constructor\n  constructor(\n    string memory _uri,\n    bytes32 _merkleroot,\n    address _proxyRegistryAddress,\n    uint32 _maxSupply,\n    uint32 _amountForDevs\n  ) ERC721Psi(\"MyBoredApe\", \"APE\") {\n    require(\n      _amountForDevs <= _maxSupply,\n      \"Low collection size or high dev amount\"\n    );\n    setBaseURI(_uri);\n    root = _merkleroot;\n    proxyRegistryAddress = _proxyRegistryAddress;\n    maxSupply = _maxSupply;\n    amountForDevs = _amountForDevs;\n  }\n\n  // Prevent smart contract calls to this contract\n  modifier onlyUser() {\n    require(msg.sender == tx.origin, \"The caller is another contract\");\n    _;\n  }\n\n  // Check caller allowlisted or not\n  modifier isValidMerkleProof(bytes32[] calldata _proof) {\n    require(\n      MerkleProof.verify(\n        _proof,\n        root,\n        keccak256(abi.encodePacked(msg.sender))\n      ) == true,\n      \"You are not allowed to mint\"\n    );\n    _;\n  }\n\n  // Metadata URI\n  function setBaseURI(string memory baseURI_) public onlyOwner {\n    _baseTokenURI = baseURI_;\n  }\n\n  function _baseURI() internal view virtual override returns (string memory) {\n    return _baseTokenURI;\n  }\n\n  // Pause contract operations for everyone except the owner\n  function togglePause() external onlyOwner {\n    if (!paused()) {\n      _pause();\n    } else {\n      _unpause();\n    }\n  }\n\n  // Refund if payment is greater than necessary\n  function refundIfOver(uint256 _price) private {\n    if (msg.value > _price) {\n      payable(msg.sender).transfer(msg.value - _price);\n    }\n  }\n\n  // Set initial sale parameters\n  function setSaleConfig(\n    uint32 _auctionSaleStartTime,\n    uint32 _auctionSaleAmountLimit,\n    uint32 _preSaleAmountPerAddress,\n    uint32 _maxAmountPerAddress\n  ) external onlyOwner {\n    require(\n      _auctionSaleStartTime != 0 && _auctionSaleStartTime >= block.timestamp,\n      \"Invalid entry for auction start time\"\n    );\n    require(\n      _auctionSaleAmountLimit <= maxSupply - amountForDevs,\n      \"There is not enough supply to cover that amount for auction\"\n    );\n    require(\n      _maxAmountPerAddress >= _preSaleAmountPerAddress,\n      \"Max limit should be greater or equal to the presale limit\"\n    );\n    saleConfig.auctionSaleStartTime = _auctionSaleStartTime;\n    saleConfig.auctionSaleAmountLimit = _auctionSaleAmountLimit;\n    saleConfig.preSaleAmountPerAddress = _preSaleAmountPerAddress;\n    saleConfig.maxAmountPerAddress = _maxAmountPerAddress;\n  }\n\n  // Auction price calculation\n  uint64 public constant AUCTION_START_PRICE = 0.5 ether;\n  uint64 public constant AUCTION_END_PRICE = 0.1 ether;\n  uint64 public constant AUCTION_PRICE_CURVE_LENGTH = 240 minutes;\n  uint64 public constant AUCTION_DROP_INTERVAL = 10 minutes;\n  uint64 public constant AUCTION_DROP_PER_STEP =\n    (AUCTION_START_PRICE - AUCTION_END_PRICE) /\n      (AUCTION_PRICE_CURVE_LENGTH / AUCTION_DROP_INTERVAL);\n\n  function getAuctionPrice(uint64 _saleStartTime) public view returns (uint64) {\n    if (block.timestamp < _saleStartTime) {\n      return AUCTION_START_PRICE;\n    }\n    if (block.timestamp - _saleStartTime >= AUCTION_PRICE_CURVE_LENGTH) {\n      return AUCTION_END_PRICE;\n    } else {\n      uint64 steps = uint64(block.timestamp - _saleStartTime) /\n        AUCTION_DROP_INTERVAL;\n      return AUCTION_START_PRICE - (steps * AUCTION_DROP_PER_STEP);\n    }\n  }\n\n  // Auction Mint\n  function auctionMint(uint64 _quantity)\n    external\n    payable\n    onlyUser\n    whenNotPaused\n  {\n    uint64 _saleStartTime = uint64(saleConfig.auctionSaleStartTime);\n    require(\n      _saleStartTime != 0 && block.timestamp >= _saleStartTime,\n      \"Auction has not started yet\"\n    );\n    require(_quantity > 0, \"Amount should be greater than zero\");\n    require(\n      totalSupply() + amountForDevs + _quantity <=\n        saleConfig.auctionSaleAmountLimit,\n      \"Reserved amount exceeded for auction\"\n    );\n    require(\n      _amountMinted[msg.sender] + _quantity <=\n        saleConfig.preSaleAmountPerAddress,\n      \"Not allowed to mint that amount\"\n    );\n    uint64 totalCost = getAuctionPrice(_saleStartTime) * _quantity;\n    require(msg.value >= totalCost, \"Payment is lower than necessary\");\n    _safeMint(msg.sender, _quantity);\n    _amountMinted[msg.sender] += _quantity;\n    refundIfOver(totalCost);\n  }\n\n  // End auction and set non auction sale configuration\n  function endAuctionAndSetNonAuctionSaleInfo(\n    uint64 _allowlistPrice,\n    uint64 _publicPrice,\n    uint32 _publicSaleStartTime\n  ) external onlyOwner {\n    saleConfig.allowlistPrice = _allowlistPrice;\n    saleConfig.publicPrice = _publicPrice;\n    saleConfig.publicSaleStartTime = _publicSaleStartTime;\n  }\n\n  // Prevent automated scripting directed to contract\n  function setPublicSaleKey(uint256 _key) external onlyOwner {\n    saleConfig.publicSaleKey = _key;\n  }\n\n  // Deploy allowlisted addresses\n  function setMerkleRoot(bytes32 _merkleroot) external onlyOwner {\n    root = _merkleroot;\n  }\n\n  // Allowlist Mint\n  function preSaleMint(uint64 _quantity, bytes32[] calldata _proof)\n    external\n    payable\n    isValidMerkleProof(_proof)\n    onlyUser\n    whenNotPaused\n  {\n    uint64 price = uint64(saleConfig.allowlistPrice);\n    require(price != 0, \"Presale has not started yet\");\n    require(_quantity > 0, \"Amount should be greater than zero\");\n    require(\n      _quantity <= saleConfig.preSaleAmountPerAddress,\n      \"Requested amount is higher than allowed\"\n    );\n    require(\n      _amountMinted[msg.sender] + _quantity <=\n        saleConfig.preSaleAmountPerAddress,\n      \"You already minted some before, please reconsider the amount you request\"\n    );\n    require(\n      totalSupply() + amountForDevs + _quantity <= maxSupply,\n      \"Exceeded max supply\"\n    );\n    uint64 totalCost = price * _quantity;\n    require(msg.value >= totalCost, \"Payment is lower than necessary\");\n    _safeMint(msg.sender, _quantity);\n    _amountMinted[msg.sender] += _quantity;\n    refundIfOver(totalCost);\n  }\n\n  // Public sale check\n  function isPublicSaleOn(\n    uint64 _publicPriceWei,\n    uint256 _publicSaleKey,\n    uint32 _publicSaleStartTime\n  ) public view returns (bool) {\n    return\n      _publicPriceWei != 0 &&\n      _publicSaleKey != 0 &&\n      _publicSaleStartTime <= block.timestamp;\n  }\n\n  // Public Mint\n  function publicSaleMint(uint64 _quantity, uint256 callerPublicSaleKey)\n    external\n    payable\n    onlyUser\n    whenNotPaused\n  {\n    uint64 price = uint64(saleConfig.publicPrice);\n    require(\n      saleConfig.publicSaleKey == callerPublicSaleKey,\n      \"Incorrect public sale key\"\n    );\n    require(\n      isPublicSaleOn(\n        saleConfig.publicPrice,\n        saleConfig.publicSaleKey,\n        saleConfig.publicSaleStartTime\n      ),\n      \"Publicsale has not started yet\"\n    );\n    require(_quantity > 0, \"Amount should be greater than zero\");\n    require(\n      _amountMinted[msg.sender] + _quantity <= saleConfig.maxAmountPerAddress,\n      \"Not allowed to mint that amount\"\n    );\n    require(\n      totalSupply() + amountForDevs + _quantity <= maxSupply,\n      \"Exceeded max supply\"\n    );\n    uint64 totalCost = price * _quantity;\n    require(msg.value >= totalCost, \"Payment is lower than necessary\");\n    _safeMint(msg.sender, _quantity);\n    _amountMinted[msg.sender] += _quantity;\n    refundIfOver(totalCost);\n  }\n\n  // Burn tokens belong to contract owner\n  function burn(uint256 firstTokenId, uint256 lastTokenId) external onlyOwner {\n    for (uint256 tokenId = firstTokenId; tokenId <= lastTokenId; tokenId++) {\n      if (_isApprovedOrOwner(msg.sender, tokenId)) {\n        _burn(tokenId);\n      }\n    }\n  }\n\n  // Decrease max supply and burn unminted amount\n  function setMaxSupply(uint256 _maxSupply) external onlyOwner {\n    require(\n      _maxSupply > totalSupply() && _maxSupply <= maxSupply,\n      \"Amount should be greater than current supply and lower than max supply\"\n    );\n    maxSupply = _maxSupply;\n  }\n\n  // Dev Mint\n  function devMint(uint64 _quantity) external onlyOwner {\n    require(\n      totalSupply() + _quantity <= amountForDevs,\n      \"Exceeded reserved amount\"\n    );\n    _safeMint(msg.sender, _quantity);\n  }\n\n  // Token ownership data by given tokenId\n  function getOwnershipData(uint256 _tokenId) external view returns (address) {\n    return ownerOf(_tokenId);\n  }\n\n  // Token balance data by address\n  function getTokenBalance(address _owner)\n    external\n    view\n    returns (uint256[] memory)\n  {\n    uint256 balance = balanceOf(_owner);\n    uint256[] memory tokenList = new uint256[](balance);\n    if (balance > 0) {\n      for (uint256 i; i < balance; i++) {\n        tokenList[i] = tokenOfOwnerByIndex(_owner, i);\n      }\n      return tokenList;\n    }\n    revert(\"Owner has no balance\");\n  }\n\n  // Withdraw Balance\n  function withdraw() external onlyOwner nonReentrant {\n    (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n    require(success, \"Transfer failed.\");\n  }\n\n  /**\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\n   */\n  function isApprovedForAll(address owner, address operator)\n    public\n    view\n    override\n    returns (bool)\n  {\n    // Whitelist OpenSea proxy contract for easy trading.\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n    if (address(proxyRegistry.proxies(owner)) == operator) {\n      return true;\n    }\n\n    return super.isApprovedForAll(owner, operator);\n  }\n}\n\n/**\n  @title An OpenSea delegate proxy contract which we include for whitelisting.\n  @author OpenSea\n*/\ncontract OwnableDelegateProxy {\n\n}\n\n/**\n  @title An OpenSea proxy registry contract which we include for whitelisting.\n  @author OpenSea\n*/\ncontract ProxyRegistry {\n  mapping(address => OwnableDelegateProxy) public proxies;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}