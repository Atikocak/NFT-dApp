{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "_merkleroot",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_proxyRegistryAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_maxSupply",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_amountForDevs",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AUCTION_DROP_INTERVAL",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_DROP_PER_STEP",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_END_PRICE",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_PRICE_CURVE_LENGTH",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "AUCTION_START_PRICE",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "_amountMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountForDevs",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        }
      ],
      "name": "auctionMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "firstTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastTokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        }
      ],
      "name": "devMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_allowlistPrice",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_publicPrice",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_publicSaleStartTime",
          "type": "uint32"
        }
      ],
      "name": "endAuctionAndSetNonAuctionSaleInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_saleStartTime",
          "type": "uint64"
        }
      ],
      "name": "getAuctionPrice",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getOwnershipData",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getTokenBalance",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_publicPriceWei",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_publicSaleKey",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_publicSaleStartTime",
          "type": "uint32"
        }
      ],
      "name": "isPublicSaleOn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        },
        {
          "internalType": "bytes32[]",
          "name": "_proof",
          "type": "bytes32[]"
        }
      ],
      "name": "preSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_quantity",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "callerPublicSaleKey",
          "type": "uint256"
        }
      ],
      "name": "publicSaleMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "root",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saleConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "auctionSaleStartTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "publicSaleStartTime",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "allowlistPrice",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "publicPrice",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "publicSaleKey",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "auctionSaleAmountLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "preSaleAmountPerAddress",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxAmountPerAddress",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        }
      ],
      "name": "setMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleroot",
          "type": "bytes32"
        }
      ],
      "name": "setMerkleRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_key",
          "type": "uint256"
        }
      ],
      "name": "setPublicSaleKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_auctionSaleStartTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_auctionSaleAmountLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_preSaleAmountPerAddress",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_maxAmountPerAddress",
          "type": "uint32"
        }
      ],
      "name": "setSaleConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "togglePause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2635c1efb17ceb79d7ae88255d222aea1bc429aca2055eddb1a5357e40622ab5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "3620807",
    "logsBloom": "0x
    "blockHash": "0x03d58cda1d15b4f6945fad441e34137e2a199d78a00f84399e673561e18c2ad0",
    "transactionHash": "0x2635c1efb17ceb79d7ae88255d222aea1bc429aca2055eddb1a5357e40622ab5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x2635c1efb17ceb79d7ae88255d222aea1bc429aca2055eddb1a5357e40622ab5",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x03d58cda1d15b4f6945fad441e34137e2a199d78a00f84399e673561e18c2ad0"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3620807",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ipfs://QmXZYx6jmchu5da85bipaMUXRrfTBurd6NrxYRt8Fj7LYe/",
    {
      "0": 18,
      "1": 187,
      "2": 192,
      "3": 63,
      "4": 187,
      "5": 7,
      "6": 76,
      "7": 204,
      "8": 49,
      "9": 142,
      "10": 123,
      "11": 222,
      "12": 13,
      "13": 58,
      "14": 43,
      "15": 140,
      "16": 240,
      "17": 13,
      "18": 199,
      "19": 22,
      "20": 95,
      "21": 17,
      "22": 190,
      "23": 241,
      "24": 145,
      "25": 161,
      "26": 105,
      "27": 190,
      "28": 177,
      "29": 249,
      "30": 24,
      "31": 70
    },
    "0xf57b2c51ded3a29e6891aba85459d600256cf317",
    100,
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "4124c1cfa8aa7fac6347803b5b9cd6d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_merkleroot\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_proxyRegistryAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_maxSupply\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_amountForDevs\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AUCTION_DROP_INTERVAL\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_DROP_PER_STEP\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_END_PRICE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_PRICE_CURVE_LENGTH\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AUCTION_START_PRICE\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_amountMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountForDevs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"}],\"name\":\"auctionMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"firstTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastTokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"}],\"name\":\"devMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_allowlistPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_publicPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint32\"}],\"name\":\"endAuctionAndSetNonAuctionSaleInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_saleStartTime\",\"type\":\"uint64\"}],\"name\":\"getAuctionPrice\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getOwnershipData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getTokenBalance\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_publicPriceWei\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_publicSaleKey\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_publicSaleStartTime\",\"type\":\"uint32\"}],\"name\":\"isPublicSaleOn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"},{\"internalType\":\"bytes32[]\",\"name\":\"_proof\",\"type\":\"bytes32[]\"}],\"name\":\"preSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_quantity\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"callerPublicSaleKey\",\"type\":\"uint256\"}],\"name\":\"publicSaleMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"auctionSaleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"publicSaleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"allowlistPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"publicPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"publicSaleKey\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"auctionSaleAmountLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"preSaleAmountPerAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxAmountPerAddress\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"}],\"name\":\"setMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleroot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_key\",\"type\":\"uint256\"}],\"name\":\"setPublicSaleKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_auctionSaleStartTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_auctionSaleAmountLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_preSaleAmountPerAddress\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_maxAmountPerAddress\",\"type\":\"uint32\"}],\"name\":\"setSaleConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"togglePause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForAll(address,address)\":{\"notice\":\"Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MyBoredApe.sol\":\"MyBoredApe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Trees proofs.\\n *\\n * The proofs can be generated using the JavaScript library\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\n *\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            bytes32 proofElement = proof[i];\\n            if (computedHash <= proofElement) {\\n                // Hash(current computed hash + current element of the proof)\\n                computedHash = _efficientHash(computedHash, proofElement);\\n            } else {\\n                // Hash(current element of the proof + current computed hash)\\n                computedHash = _efficientHash(proofElement, computedHash);\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaaa504ac17eb0298dcdf5733ce24021b4914f035b97f4400b92827341d3facb3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ERC721Psi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Author: @atibaba.eth\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"solidity-bits/contracts/BitMaps.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata and Enumerable extension. Built to optimize for lower gas during batch mints and transfers of Non-Fungible Tokens.\\n *\\n * Assumes serials are sequentially minted starting at 1 (e.g. 1, 2, 3, 4..).\\n *\\n * Supports burning tokens to address(0).\\n */\\ncontract ERC721Psi is\\n  Context,\\n  ERC165,\\n  IERC721,\\n  IERC721Metadata,\\n  IERC721Enumerable,\\n  Pausable\\n{\\n  using Address for address;\\n  using Strings for uint256;\\n  using BitMaps for BitMaps.BitMap;\\n\\n  BitMaps.BitMap private _batchHead;\\n  BitMaps.BitMap private _burnedToken;\\n  uint256 private currentIndex = 1; // to start token indexing from the given number\\n\\n  // Token name\\n  string private _name;\\n  // Token symbol\\n  string private _symbol;\\n  // Mapping from token ID to ownership details\\n  mapping(uint256 => address) internal _owners;\\n  // Mint amount for ownership details\\n  uint256 internal _minted;\\n  // Mapping from token ID to approved address\\n  mapping(uint256 => address) private _tokenApprovals;\\n  // Mapping from owner to operator approvals\\n  mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n  /**\\n   * @dev\\n   * Initializes the contract by setting the constructor parameters including\\n   `name` and `symbol` to the token collection;\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev See {IERC165-supportsInterface}.\\n   */\\n  function supportsInterface(bytes4 interfaceId)\\n    public\\n    view\\n    virtual\\n    override(ERC165, IERC165)\\n    returns (bool)\\n  {\\n    return\\n      interfaceId == type(IERC721).interfaceId ||\\n      interfaceId == type(IERC721Metadata).interfaceId ||\\n      interfaceId == type(IERC721Enumerable).interfaceId ||\\n      super.supportsInterface(interfaceId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-balanceOf}.\\n   */\\n  function balanceOf(address owner)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256)\\n  {\\n    require(\\n      owner != address(0),\\n      \\\"ERC721Psi: balance query for the zero address\\\"\\n    );\\n\\n    uint256 count;\\n    for (uint256 i; i < currentIndex; ++i) {\\n      if (_exists(i)) {\\n        if (owner == ownerOf(i)) {\\n          ++count;\\n        }\\n      }\\n    }\\n    return count;\\n  }\\n\\n  /**\\n   * @dev See {IERC721-ownerOf}.\\n   */\\n  function ownerOf(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    (address owner, ) = _ownerAndBatchHeadOf(tokenId);\\n    return owner;\\n  }\\n\\n  function _ownerAndBatchHeadOf(uint256 tokenId)\\n    internal\\n    view\\n    returns (address owner, uint256 tokenIdBatchHead)\\n  {\\n    require(_exists(tokenId), \\\"ERC721Psi: owner query for nonexistent token\\\");\\n    tokenIdBatchHead = _getBatchHead(tokenId);\\n    owner = _owners[tokenIdBatchHead];\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-name}.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-symbol}.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev See {IERC721Metadata-tokenURI}.\\n   */\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (string memory)\\n  {\\n    require(_exists(tokenId), \\\"ERC721Psi: URI query for nonexistent token\\\");\\n\\n    string memory baseURI = _baseURI();\\n    return\\n      bytes(baseURI).length > 0\\n        ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n        : \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n   * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n   * by default, can be overriden in child contracts.\\n   */\\n  function _baseURI() internal view virtual returns (string memory) {\\n    return \\\"\\\";\\n  }\\n\\n  /**\\n   * @dev See {IERC721-approve}.\\n   */\\n  function approve(address to, uint256 tokenId) public virtual override {\\n    address owner = ownerOf(tokenId);\\n    require(to != owner, \\\"ERC721Psi: approval to current owner\\\");\\n\\n    require(\\n      _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n      \\\"ERC721Psi: approve caller is not owner nor approved for all\\\"\\n    );\\n\\n    _approve(to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-getApproved}.\\n   */\\n  function getApproved(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (address)\\n  {\\n    require(\\n      _exists(tokenId),\\n      \\\"ERC721Psi: approved query for nonexistent token\\\"\\n    );\\n\\n    return _tokenApprovals[tokenId];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-setApprovalForAll}.\\n   */\\n  function setApprovalForAll(address operator, bool approved)\\n    public\\n    virtual\\n    override\\n  {\\n    require(operator != _msgSender(), \\\"ERC721Psi: approve to caller\\\");\\n\\n    _operatorApprovals[_msgSender()][operator] = approved;\\n    emit ApprovalForAll(_msgSender(), operator, approved);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-isApprovedForAll}.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (bool)\\n  {\\n    return _operatorApprovals[owner][operator];\\n  }\\n\\n  /**\\n   * @dev See {IERC721-transferFrom}.\\n   */\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    //solhint-disable-next-line max-line-length\\n    require(\\n      _isApprovedOrOwner(_msgSender(), tokenId),\\n      \\\"ERC721Psi: transfer caller is not owner nor approved\\\"\\n    );\\n    _transfer(from, to, tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) public virtual override {\\n    safeTransferFrom(from, to, tokenId, \\\"\\\");\\n  }\\n\\n  /**\\n   * @dev See {IERC721-safeTransferFrom}.\\n   */\\n  function safeTransferFrom(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) public virtual override {\\n    require(\\n      _isApprovedOrOwner(_msgSender(), tokenId),\\n      \\\"ERC721Psi: transfer caller is not owner nor approved\\\"\\n    );\\n    _safeTransfer(from, to, tokenId, _data);\\n  }\\n\\n  /**\\n   * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n   * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n   *\\n   * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n   *\\n   * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n   * implement alternative mechanisms to perform token transfer, such as signature-based.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must exist and be owned by `from`.\\n   * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _safeTransfer(\\n    address from,\\n    address to,\\n    uint256 tokenId,\\n    bytes memory _data\\n  ) internal virtual {\\n    _transfer(from, to, tokenId);\\n    require(\\n      _checkOnERC721Received(from, to, tokenId, 1, _data),\\n      \\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  /**\\n   * @dev Returns whether `tokenId` exists.\\n   *\\n   * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n   *\\n   * Tokens start existing when they are minted (`_mint`),\\n   */\\n  function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n    if (_burnedToken.get(tokenId) || tokenId == 0) {\\n      return false;\\n    }\\n    return tokenId < currentIndex;\\n  }\\n\\n  /**\\n   * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   */\\n  function _isApprovedOrOwner(address spender, uint256 tokenId)\\n    internal\\n    view\\n    virtual\\n    returns (bool)\\n  {\\n    require(\\n      _exists(tokenId),\\n      \\\"ERC721Psi: operator query for nonexistent token\\\"\\n    );\\n    address owner = ownerOf(tokenId);\\n    return (spender == owner ||\\n      getApproved(tokenId) == spender ||\\n      isApprovedForAll(owner, spender));\\n  }\\n\\n  /**\\n   * @dev Mints `quantity` tokens and transfers them to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - there must be `quantity` tokens remaining unminted in the total collection.\\n   * - `to` cannot be the zero address.\\n   * - `quantity` cannot be larger than the max batch size.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n\\n  function _safeMint(address to, uint256 quantity) internal virtual {\\n    _safeMint(to, quantity, \\\"\\\");\\n  }\\n\\n  function _safeMint(\\n    address to,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) internal virtual {\\n    uint256 startTokenId = currentIndex;\\n    _mint(to, quantity);\\n    require(\\n      _checkOnERC721Received(address(0), to, startTokenId, quantity, _data),\\n      \\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\"\\n    );\\n  }\\n\\n  function _mint(address to, uint256 quantity) internal virtual {\\n    uint256 tokenIdBatchHead = currentIndex;\\n\\n    require(quantity > 0, \\\"ERC721Psi: quantity must be greater than zero\\\");\\n    require(to != address(0), \\\"ERC721Psi: mint to the zero address\\\");\\n\\n    _beforeTokenTransfers(address(0), to, tokenIdBatchHead, quantity);\\n    _minted += quantity;\\n    _owners[tokenIdBatchHead] = to;\\n    _batchHead.set(tokenIdBatchHead);\\n    _afterTokenTransfers(address(0), to, tokenIdBatchHead, quantity);\\n\\n    // Emit events\\n    for (\\n      uint256 tokenId = tokenIdBatchHead;\\n      tokenId < tokenIdBatchHead + quantity;\\n      tokenId++\\n    ) {\\n      emit Transfer(address(0), to, tokenId);\\n      currentIndex = tokenId + 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev Destroys `tokenId`.\\n   * The approval is cleared when the token is burned.\\n   *\\n   * Requirements:\\n   *\\n   * - `tokenId` must exist.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _burn(uint256 tokenId) internal virtual {\\n    address from = ownerOf(tokenId);\\n    _beforeTokenTransfers(from, address(0), tokenId, 1);\\n    _burnedToken.set(tokenId);\\n\\n    emit Transfer(from, address(0), tokenId);\\n\\n    _afterTokenTransfers(from, address(0), tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Transfers `tokenId` from `from` to `to`.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - `tokenId` token must be owned by `from`.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function _transfer(\\n    address from,\\n    address to,\\n    uint256 tokenId\\n  ) internal virtual whenNotPaused {\\n    (address owner, uint256 tokenIdBatchHead) = _ownerAndBatchHeadOf(tokenId);\\n\\n    require(owner == from, \\\"ERC721Psi: transfer of token that is not own\\\");\\n    require(to != address(0), \\\"ERC721Psi: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfers(from, to, tokenId, 1);\\n\\n    // Clear approvals from the previous owner\\n    _approve(address(0), tokenId);\\n\\n    uint256 nextTokenId = tokenId + 1;\\n\\n    if (!_batchHead.get(nextTokenId) && nextTokenId < currentIndex) {\\n      _owners[nextTokenId] = from;\\n      _batchHead.set(nextTokenId);\\n    }\\n\\n    _owners[tokenId] = to;\\n    if (tokenId != tokenIdBatchHead) {\\n      _batchHead.set(tokenId);\\n    }\\n\\n    emit Transfer(from, to, tokenId);\\n\\n    _afterTokenTransfers(from, to, tokenId, 1);\\n  }\\n\\n  /**\\n   * @dev Approve `to` to operate on `tokenId`\\n   *\\n   * Emits a {Approval} event.\\n   */\\n  function _approve(address to, uint256 tokenId) internal virtual {\\n    _tokenApprovals[tokenId] = to;\\n    emit Approval(ownerOf(tokenId), to, tokenId);\\n  }\\n\\n  /**\\n   * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n   * The call is not executed if the target address is not a contract.\\n   *\\n   * @param from address representing the previous owner of the given token ID\\n   * @param to target address that will receive the tokens\\n   * @param startTokenId uint256 the first ID of the tokens to be transferred\\n   * @param quantity uint256 amount of the tokens to be transfered.\\n   * @param _data bytes optional data to send along with the call\\n   * @return r bool whether the call correctly returned the expected magic value\\n   */\\n  function _checkOnERC721Received(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity,\\n    bytes memory _data\\n  ) private returns (bool r) {\\n    if (to.isContract()) {\\n      r = true;\\n      for (\\n        uint256 tokenId = startTokenId;\\n        tokenId < startTokenId + quantity;\\n        tokenId++\\n      ) {\\n        try\\n          IERC721Receiver(to).onERC721Received(\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n          )\\n        returns (bytes4 retval) {\\n          r = r && retval == IERC721Receiver.onERC721Received.selector;\\n        } catch (bytes memory reason) {\\n          if (reason.length == 0) {\\n            revert(\\\"ERC721Psi: transfer to non ERC721Receiver implementer\\\");\\n          } else {\\n            assembly {\\n              revert(add(32, reason), mload(reason))\\n            }\\n          }\\n        }\\n      }\\n      return r;\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  function _getBatchHead(uint256 tokenId)\\n    internal\\n    view\\n    returns (uint256 tokenIdBatchHead)\\n  {\\n    tokenIdBatchHead = _batchHead.scanForward(tokenId);\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-totalSupply}.\\n   */\\n  function totalSupply() public view override returns (uint256) {\\n    return _minted - _burned();\\n  }\\n\\n  /**\\n   * @dev Returns number of token burned.\\n   */\\n  function _burned() internal view returns (uint256 burned) {\\n    uint256 totalBucket = (_minted >> 8) + 1;\\n\\n    for (uint256 i = 0; i < totalBucket; i++) {\\n      uint256 bucket = _burnedToken.getBucket(i);\\n      burned += _popcount(bucket);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns number of set bits.\\n   */\\n  function _popcount(uint256 x) private pure returns (uint256 count) {\\n    unchecked {\\n      for (count = 0; x != 0; count++) x &= x - 1;\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenByIndex}.\\n   */\\n  function tokenByIndex(uint256 index)\\n    public\\n    view\\n    override\\n    returns (uint256 tokenId)\\n  {\\n    require(index < totalSupply(), \\\"ERC721Psi: global index out of bounds\\\");\\n\\n    uint256 count;\\n    for (uint256 i; i < currentIndex; i++) {\\n      if (_exists(i)) {\\n        if (count == index) return i;\\n        else count++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n   */\\n  function tokenOfOwnerByIndex(address owner, uint256 index)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint256 tokenId)\\n  {\\n    uint256 count;\\n    for (uint256 i; i < currentIndex; i++) {\\n      if (_exists(i) && owner == ownerOf(i)) {\\n        if (count == index) return i;\\n        else count++;\\n      }\\n    }\\n    revert(\\\"ERC721Psi: owner index out of bounds\\\");\\n  }\\n\\n  /**\\n   * @dev Hook that is called before a set of serially-ordered token ids are about to be transferred. This includes minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n   * transferred to `to`.\\n   * - When `from` is zero, `tokenId` will be minted for `to`.\\n   */\\n  function _beforeTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after a set of serially-ordered token ids have been transferred. This includes\\n   * minting.\\n   *\\n   * startTokenId - the first token id to be transferred\\n   * quantity - the amount to be transferred\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero.\\n   * - `from` and `to` are never both zero.\\n   */\\n  function _afterTokenTransfers(\\n    address from,\\n    address to,\\n    uint256 startTokenId,\\n    uint256 quantity\\n  ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1049f5d4d492bb10f5112211bcabaea238c7034d8aa3d4ea44a64e946f47fb26\",\"license\":\"MIT\"},\"contracts/MyBoredApe.sol\":{\"content\":\"/*\\n     __  ___      ____                      __   ___\\n    /  |/  /_  __/ __ )____  ________  ____/ /  /   |  ____  ___\\n   / /|_/ / / / / __  / __ \\\\/ ___/ _ \\\\/ __  /  / /| | / __ \\\\/ _ \\\\\\n  / /  / / /_/ / /_/ / /_/ / /  /  __/ /_/ /  / ___ |/ /_/ /  __/\\n /_/  /_/\\\\__, /_____/\\\\____/_/   \\\\___/\\\\__,_/  /_/  |_/ .___/\\\\___/\\n        /____/                                     /_/\\n*/\\n\\n// @created for Fiverr\\n// @author atibaba.eth\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./ERC721Psi.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract MyBoredApe is Pausable, ERC721Psi, Ownable, ReentrancyGuard {\\n  using Strings for uint256;\\n\\n  // Sale configuration at once\\n  struct SaleConfig {\\n    uint32 auctionSaleStartTime;\\n    uint32 publicSaleStartTime;\\n    uint64 allowlistPrice;\\n    uint64 publicPrice;\\n    uint256 publicSaleKey;\\n    uint32 auctionSaleAmountLimit;\\n    uint32 preSaleAmountPerAddress;\\n    uint32 maxAmountPerAddress;\\n  }\\n\\n  // Starting variables\\n  SaleConfig public saleConfig;\\n  address proxyRegistryAddress;\\n  uint256 public maxSupply;\\n  uint32 public immutable amountForDevs;\\n  bytes32 public root;\\n  string private _baseTokenURI;\\n  mapping(address => uint256) public _amountMinted;\\n\\n  // Not changable variables for constructor\\n  constructor(\\n    string memory _uri,\\n    bytes32 _merkleroot,\\n    address _proxyRegistryAddress,\\n    uint32 _maxSupply,\\n    uint32 _amountForDevs\\n  ) ERC721Psi(\\\"MyBoredApe\\\", \\\"APE\\\") {\\n    require(\\n      _amountForDevs <= _maxSupply,\\n      \\\"Low collection size or high dev amount\\\"\\n    );\\n    setBaseURI(_uri);\\n    root = _merkleroot;\\n    proxyRegistryAddress = _proxyRegistryAddress;\\n    maxSupply = _maxSupply;\\n    amountForDevs = _amountForDevs;\\n  }\\n\\n  // Prevent smart contract calls to this contract\\n  modifier onlyUser() {\\n    require(msg.sender == tx.origin, \\\"The caller is another contract\\\");\\n    _;\\n  }\\n\\n  // Check caller allowlisted or not\\n  modifier isValidMerkleProof(bytes32[] calldata _proof) {\\n    require(\\n      MerkleProof.verify(\\n        _proof,\\n        root,\\n        keccak256(abi.encodePacked(msg.sender))\\n      ) == true,\\n      \\\"You are not allowed to mint\\\"\\n    );\\n    _;\\n  }\\n\\n  // Metadata URI\\n  function setBaseURI(string memory baseURI_) public onlyOwner {\\n    _baseTokenURI = baseURI_;\\n  }\\n\\n  function _baseURI() internal view virtual override returns (string memory) {\\n    return _baseTokenURI;\\n  }\\n\\n  // Pause contract operations for everyone except the owner\\n  function togglePause() external onlyOwner {\\n    if (!paused()) {\\n      _pause();\\n    } else {\\n      _unpause();\\n    }\\n  }\\n\\n  // Refund if payment is greater than necessary\\n  function refundIfOver(uint256 _price) private {\\n    if (msg.value > _price) {\\n      payable(msg.sender).transfer(msg.value - _price);\\n    }\\n  }\\n\\n  // Set initial sale parameters\\n  function setSaleConfig(\\n    uint32 _auctionSaleStartTime,\\n    uint32 _auctionSaleAmountLimit,\\n    uint32 _preSaleAmountPerAddress,\\n    uint32 _maxAmountPerAddress\\n  ) external onlyOwner {\\n    require(\\n      _auctionSaleStartTime != 0 && _auctionSaleStartTime >= block.timestamp,\\n      \\\"Invalid entry for auction start time\\\"\\n    );\\n    require(\\n      _auctionSaleAmountLimit <= maxSupply - amountForDevs,\\n      \\\"There is not enough supply to cover that amount for auction\\\"\\n    );\\n    require(\\n      _maxAmountPerAddress >= _preSaleAmountPerAddress,\\n      \\\"Max limit should be greater or equal to the presale limit\\\"\\n    );\\n    saleConfig.auctionSaleStartTime = _auctionSaleStartTime;\\n    saleConfig.auctionSaleAmountLimit = _auctionSaleAmountLimit;\\n    saleConfig.preSaleAmountPerAddress = _preSaleAmountPerAddress;\\n    saleConfig.maxAmountPerAddress = _maxAmountPerAddress;\\n  }\\n\\n  // Auction price calculation\\n  uint64 public constant AUCTION_START_PRICE = 0.5 ether;\\n  uint64 public constant AUCTION_END_PRICE = 0.1 ether;\\n  uint64 public constant AUCTION_PRICE_CURVE_LENGTH = 240 minutes;\\n  uint64 public constant AUCTION_DROP_INTERVAL = 10 minutes;\\n  uint64 public constant AUCTION_DROP_PER_STEP =\\n    (AUCTION_START_PRICE - AUCTION_END_PRICE) /\\n      (AUCTION_PRICE_CURVE_LENGTH / AUCTION_DROP_INTERVAL);\\n\\n  function getAuctionPrice(uint64 _saleStartTime) public view returns (uint64) {\\n    if (block.timestamp < _saleStartTime) {\\n      return AUCTION_START_PRICE;\\n    }\\n    if (block.timestamp - _saleStartTime >= AUCTION_PRICE_CURVE_LENGTH) {\\n      return AUCTION_END_PRICE;\\n    } else {\\n      uint64 steps = uint64(block.timestamp - _saleStartTime) /\\n        AUCTION_DROP_INTERVAL;\\n      return AUCTION_START_PRICE - (steps * AUCTION_DROP_PER_STEP);\\n    }\\n  }\\n\\n  // Auction Mint\\n  function auctionMint(uint64 _quantity)\\n    external\\n    payable\\n    onlyUser\\n    whenNotPaused\\n  {\\n    uint64 _saleStartTime = uint64(saleConfig.auctionSaleStartTime);\\n    require(\\n      _saleStartTime != 0 && block.timestamp >= _saleStartTime,\\n      \\\"Auction has not started yet\\\"\\n    );\\n    require(_quantity > 0, \\\"Amount should be greater than zero\\\");\\n    require(\\n      totalSupply() + amountForDevs + _quantity <=\\n        saleConfig.auctionSaleAmountLimit,\\n      \\\"Reserved amount exceeded for auction\\\"\\n    );\\n    require(\\n      _amountMinted[msg.sender] + _quantity <=\\n        saleConfig.preSaleAmountPerAddress,\\n      \\\"Not allowed to mint that amount\\\"\\n    );\\n    uint64 totalCost = getAuctionPrice(_saleStartTime) * _quantity;\\n    require(msg.value >= totalCost, \\\"Payment is lower than necessary\\\");\\n    _safeMint(msg.sender, _quantity);\\n    _amountMinted[msg.sender] += _quantity;\\n    refundIfOver(totalCost);\\n  }\\n\\n  // End auction and set non auction sale configuration\\n  function endAuctionAndSetNonAuctionSaleInfo(\\n    uint64 _allowlistPrice,\\n    uint64 _publicPrice,\\n    uint32 _publicSaleStartTime\\n  ) external onlyOwner {\\n    saleConfig.allowlistPrice = _allowlistPrice;\\n    saleConfig.publicPrice = _publicPrice;\\n    saleConfig.publicSaleStartTime = _publicSaleStartTime;\\n  }\\n\\n  // Prevent automated scripting directed to contract\\n  function setPublicSaleKey(uint256 _key) external onlyOwner {\\n    saleConfig.publicSaleKey = _key;\\n  }\\n\\n  // Deploy allowlisted addresses\\n  function setMerkleRoot(bytes32 _merkleroot) external onlyOwner {\\n    root = _merkleroot;\\n  }\\n\\n  // Allowlist Mint\\n  function preSaleMint(uint64 _quantity, bytes32[] calldata _proof)\\n    external\\n    payable\\n    isValidMerkleProof(_proof)\\n    onlyUser\\n    whenNotPaused\\n  {\\n    uint64 price = uint64(saleConfig.allowlistPrice);\\n    require(price != 0, \\\"Presale has not started yet\\\");\\n    require(_quantity > 0, \\\"Amount should be greater than zero\\\");\\n    require(\\n      _quantity <= saleConfig.preSaleAmountPerAddress,\\n      \\\"Requested amount is higher than allowed\\\"\\n    );\\n    require(\\n      _amountMinted[msg.sender] + _quantity <=\\n        saleConfig.preSaleAmountPerAddress,\\n      \\\"You already minted some before, please reconsider the amount you request\\\"\\n    );\\n    require(\\n      totalSupply() + amountForDevs + _quantity <= maxSupply,\\n      \\\"Exceeded max supply\\\"\\n    );\\n    uint64 totalCost = price * _quantity;\\n    require(msg.value >= totalCost, \\\"Payment is lower than necessary\\\");\\n    _safeMint(msg.sender, _quantity);\\n    _amountMinted[msg.sender] += _quantity;\\n    refundIfOver(totalCost);\\n  }\\n\\n  // Public sale check\\n  function isPublicSaleOn(\\n    uint64 _publicPriceWei,\\n    uint256 _publicSaleKey,\\n    uint32 _publicSaleStartTime\\n  ) public view returns (bool) {\\n    return\\n      _publicPriceWei != 0 &&\\n      _publicSaleKey != 0 &&\\n      _publicSaleStartTime <= block.timestamp;\\n  }\\n\\n  // Public Mint\\n  function publicSaleMint(uint64 _quantity, uint256 callerPublicSaleKey)\\n    external\\n    payable\\n    onlyUser\\n    whenNotPaused\\n  {\\n    uint64 price = uint64(saleConfig.publicPrice);\\n    require(\\n      saleConfig.publicSaleKey == callerPublicSaleKey,\\n      \\\"Incorrect public sale key\\\"\\n    );\\n    require(\\n      isPublicSaleOn(\\n        saleConfig.publicPrice,\\n        saleConfig.publicSaleKey,\\n        saleConfig.publicSaleStartTime\\n      ),\\n      \\\"Publicsale has not started yet\\\"\\n    );\\n    require(_quantity > 0, \\\"Amount should be greater than zero\\\");\\n    require(\\n      _amountMinted[msg.sender] + _quantity <= saleConfig.maxAmountPerAddress,\\n      \\\"Not allowed to mint that amount\\\"\\n    );\\n    require(\\n      totalSupply() + amountForDevs + _quantity <= maxSupply,\\n      \\\"Exceeded max supply\\\"\\n    );\\n    uint64 totalCost = price * _quantity;\\n    require(msg.value >= totalCost, \\\"Payment is lower than necessary\\\");\\n    _safeMint(msg.sender, _quantity);\\n    _amountMinted[msg.sender] += _quantity;\\n    refundIfOver(totalCost);\\n  }\\n\\n  // Burn tokens belong to contract owner\\n  function burn(uint256 firstTokenId, uint256 lastTokenId) external onlyOwner {\\n    for (uint256 tokenId = firstTokenId; tokenId <= lastTokenId; tokenId++) {\\n      if (_isApprovedOrOwner(msg.sender, tokenId)) {\\n        _burn(tokenId);\\n      }\\n    }\\n  }\\n\\n  // Decrease max supply and burn unminted amount\\n  function setMaxSupply(uint256 _maxSupply) external onlyOwner {\\n    require(\\n      _maxSupply > totalSupply() && _maxSupply <= maxSupply,\\n      \\\"Amount should be greater than current supply and lower than max supply\\\"\\n    );\\n    maxSupply = _maxSupply;\\n  }\\n\\n  // Dev Mint\\n  function devMint(uint64 _quantity) external onlyOwner {\\n    require(\\n      totalSupply() + _quantity <= amountForDevs,\\n      \\\"Exceeded reserved amount\\\"\\n    );\\n    _safeMint(msg.sender, _quantity);\\n  }\\n\\n  // Token ownership data by given tokenId\\n  function getOwnershipData(uint256 _tokenId) external view returns (address) {\\n    return ownerOf(_tokenId);\\n  }\\n\\n  // Token balance data by address\\n  function getTokenBalance(address _owner)\\n    external\\n    view\\n    returns (uint256[] memory)\\n  {\\n    uint256 balance = balanceOf(_owner);\\n    uint256[] memory tokenList = new uint256[](balance);\\n    if (balance > 0) {\\n      for (uint256 i; i < balance; i++) {\\n        tokenList[i] = tokenOfOwnerByIndex(_owner, i);\\n      }\\n      return tokenList;\\n    }\\n    revert(\\\"Owner has no balance\\\");\\n  }\\n\\n  // Withdraw Balance\\n  function withdraw() external onlyOwner nonReentrant {\\n    (bool success, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n    require(success, \\\"Transfer failed.\\\");\\n  }\\n\\n  /**\\n   * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.\\n   */\\n  function isApprovedForAll(address owner, address operator)\\n    public\\n    view\\n    override\\n    returns (bool)\\n  {\\n    // Whitelist OpenSea proxy contract for easy trading.\\n    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\\n    if (address(proxyRegistry.proxies(owner)) == operator) {\\n      return true;\\n    }\\n\\n    return super.isApprovedForAll(owner, operator);\\n  }\\n}\\n\\n/**\\n  @title An OpenSea delegate proxy contract which we include for whitelisting.\\n  @author OpenSea\\n*/\\ncontract OwnableDelegateProxy {\\n\\n}\\n\\n/**\\n  @title An OpenSea proxy registry contract which we include for whitelisting.\\n  @author OpenSea\\n*/\\ncontract ProxyRegistry {\\n  mapping(address => OwnableDelegateProxy) public proxies;\\n}\\n\",\"keccak256\":\"0x6f482cd6ce76c5c0246de6bd63c33647bffa38ba6305fb7b11f6d59aa0a7a546\",\"license\":\"MIT\"},\"solidity-bits/contracts/BitMaps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n   _____       ___     ___ __           ____  _ __      \\n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\\n  \\\\__ \\\\/ __ \\\\/ / / __  / / __/ / / /  / __  / / __/ ___/\\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \\n/____/\\\\____/_/_/\\\\__,_/_/\\\\__/\\\\__, /  /_____/_/\\\\__/____/  \\n                           /____/                        \\n\\n- npm: https://www.npmjs.com/package/solidity-bits\\n- github: https://github.com/estarriolvetch/solidity-bits\\n\\n */\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BitScan.sol\\\";\\n\\n/**\\n * @dev This Library is a modified version of Openzeppelin's BitMaps library.\\n * Functions of finding the index of the closest set bit from a given index are added.\\n * The indexing of each bucket is modifed to count from the MSB to the LSB instead of from the LSB to the MSB.\\n * The modification of indexing makes finding the closest previous set bit more efficient in gas usage.\\n*/\\n\\n/**\\n * @dev Library for managing uint256 to bool mapping in a compact and efficient way, providing the keys are sequential.\\n * Largelly inspired by Uniswap's https://github.com/Uniswap/merkle-distributor/blob/master/contracts/MerkleDistributor.sol[merkle-distributor].\\n */\\n\\nlibrary BitMaps {\\n    using BitScan for uint256;\\n    uint256 private constant MASK_INDEX_ZERO = (1 << 255);\\n    struct BitMap {\\n        mapping(uint256 => uint256) _data;\\n    }\\n\\n    /**\\n     * @dev Returns whether the bit at `index` is set.\\n     */\\n    function get(BitMap storage bitmap, uint256 index) internal view returns (bool) {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        return bitmap._data[bucket] & mask != 0;\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index` to the boolean `value`.\\n     */\\n    function setTo(\\n        BitMap storage bitmap,\\n        uint256 index,\\n        bool value\\n    ) internal {\\n        if (value) {\\n            set(bitmap, index);\\n        } else {\\n            unset(bitmap, index);\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the bit at `index`.\\n     */\\n    function set(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        bitmap._data[bucket] |= mask;\\n    }\\n\\n    /**\\n     * @dev Unsets the bit at `index`.\\n     */\\n    function unset(BitMap storage bitmap, uint256 index) internal {\\n        uint256 bucket = index >> 8;\\n        uint256 mask = MASK_INDEX_ZERO >> (index & 0xff);\\n        bitmap._data[bucket] &= ~mask;\\n    }\\n\\n    /**\\n     * @dev Find the closest index of the set bit before `index`.\\n     */\\n    function scanForward(BitMap storage bitmap, uint256 index) internal view returns (uint256) {\\n        uint256 bucket = index >> 8;\\n\\n        // index within the bucket\\n        uint256 bucketIndex = (index & 0xff);\\n\\n        // load a bitboard from the bitmap.\\n        uint256 bb = bitmap._data[bucket];\\n\\n        // offset the bitboard to scan from `bucketIndex`.\\n        bb = bb >> (0xff ^ bucketIndex); // bb >> (255 - bucketIndex)\\n        \\n        if(bb > 0) {\\n            unchecked {\\n                return (bucket << 8) | (bucketIndex -  bb.bitScanForward256());    \\n            }\\n        } else {\\n            while(true) {\\n                require(bucket > 0, \\\"BitMaps: The set bit before the index doesn't exist.\\\");\\n                unchecked {\\n                    bucket--;\\n                }\\n                // No offset. Always scan from the least significiant bit now.\\n                bb = bitmap._data[bucket];\\n                \\n                if(bb > 0) {\\n                    unchecked {\\n                        return (bucket << 8) | (255 -  bb.bitScanForward256());    \\n                    }\\n                } \\n            }\\n        }\\n    }\\n\\n    function getBucket(BitMap storage bitmap, uint256 bucket) internal view returns (uint256) {\\n        return bitmap._data[bucket];\\n    }\\n}\\n\",\"keccak256\":\"0x7fb81ae8b0704656deaee99e6314d0674fe67e863fc36aba2958330712c51660\",\"license\":\"MIT\"},\"solidity-bits/contracts/BitScan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n   _____       ___     ___ __           ____  _ __      \\n  / ___/____  / (_)___/ (_) /___  __   / __ )(_) /______\\n  \\\\__ \\\\/ __ \\\\/ / / __  / / __/ / / /  / __  / / __/ ___/\\n ___/ / /_/ / / / /_/ / / /_/ /_/ /  / /_/ / / /_(__  ) \\n/____/\\\\____/_/_/\\\\__,_/_/\\\\__/\\\\__, /  /_____/_/\\\\__/____/  \\n                           /____/                        \\n\\n- npm: https://www.npmjs.com/package/solidity-bits\\n- github: https://github.com/estarriolvetch/solidity-bits\\n\\n */\\n\\npragma solidity ^0.8.0;\\n\\n\\nlibrary BitScan {\\n    uint256 constant private DEBRUIJN_256 = 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff;\\n    bytes constant private LOOKUP_TABLE_256 = hex\\\"0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8\\\";\\n\\n    /**\\n        @dev Isolate the least significant set bit.\\n     */ \\n    function isolateLS1B256(uint256 bb) pure internal returns (uint256) {\\n        require(bb > 0);\\n        unchecked {\\n            return bb & (0 - bb);\\n        }\\n    } \\n\\n    /**\\n        @dev Isolate the most significant set bit.\\n     */ \\n    function isolateMS1B256(uint256 bb) pure internal returns (uint256) {\\n        require(bb > 0);\\n        unchecked {\\n            bb |= bb >> 256;\\n            bb |= bb >> 128;\\n            bb |= bb >> 64;\\n            bb |= bb >> 32;\\n            bb |= bb >> 16;\\n            bb |= bb >> 8;\\n            bb |= bb >> 4;\\n            bb |= bb >> 2;\\n            bb |= bb >> 1;\\n            \\n            return (bb >> 1) + 1;\\n        }\\n    } \\n\\n    /**\\n        @dev Find the index of the lest significant set bit. (trailing zero count)\\n     */ \\n    function bitScanForward256(uint256 bb) pure internal returns (uint8) {\\n        unchecked {\\n            return uint8(LOOKUP_TABLE_256[(isolateLS1B256(bb) * DEBRUIJN_256) >> 248]);\\n        }   \\n    }\\n\\n    /**\\n        @dev Find the index of the most significant set bit.\\n     */ \\n    function bitScanReverse256(uint256 bb) pure internal returns (uint8) {\\n        unchecked {\\n            return 255 - uint8(LOOKUP_TABLE_256[((isolateMS1B256(bb) * DEBRUIJN_256) >> 248)]);\\n        }   \\n    }\\n\\n    function log2(uint256 bb) pure internal returns (uint8) {\\n        unchecked {\\n            return uint8(LOOKUP_TABLE_256[(isolateMS1B256(bb) * DEBRUIJN_256) >> 248]);\\n        } \\n    }\\n}\",\"keccak256\":\"0xce8faaa2fd2187e06aae559aa3160a15eeaa5ae00036da204f768f414e739fce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260016003553480156200001657600080fd5b506040516200408338038062004083833981016040819052620000399162000337565b604080518082018252600a8152694d79426f72656441706560b01b60208083019182528351808501909452600384526241504560e81b908401526000805460ff191690558151919291620000909160049162000249565b508051620000a690600590602084019062000249565b505050620000c3620000bd6200017e60201b60201c565b62000182565b6001600b5563ffffffff8083169082161115620001365760405162461bcd60e51b815260206004820152602660248201527f4c6f7720636f6c6c656374696f6e2073697a65206f7220686967682064657620604482015265185b5bdd5b9d60d21b60648201526084015b60405180910390fd5b6200014185620001d4565b601193909355600f80546001600160a01b0319166001600160a01b03939093169290921790915563ffffffff908116601055166080525062000495565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600a546001600160a01b03163314620002305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016200012d565b80516200024590601290602084019062000249565b5050565b828054620002579062000458565b90600052602060002090601f0160209004810192826200027b5760008555620002c6565b82601f106200029657805160ff1916838001178555620002c6565b82800160010185558215620002c6579182015b82811115620002c6578251825591602001919060010190620002a9565b50620002d4929150620002d8565b5090565b5b80821115620002d45760008155600101620002d9565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200031d57600080fd5b919050565b805163ffffffff811681146200031d57600080fd5b600080600080600060a086880312156200035057600080fd5b85516001600160401b03808211156200036857600080fd5b818801915088601f8301126200037d57600080fd5b815181811115620003925762000392620002ef565b604051601f8201601f19908116603f01168101908382118183101715620003bd57620003bd620002ef565b81604052828152602093508b84848701011115620003da57600080fd5b600091505b82821015620003fe5784820184015181830185015290830190620003df565b82821115620004105760008484830101525b80995050505080880151955050506200042c6040870162000305565b92506200043c6060870162000322565b91506200044c6080870162000322565b90509295509295909350565b600181811c908216806200046d57607f821691505b602082108114156200048f57634e487b7160e01b600052602260045260246000fd5b50919050565b608051613baf620004d4600039600081816108bf01528181610dd30152818161186c01528181611c4101528181611d820152611f550152613baf6000f3fe6080604052600436106102885760003560e01c80637cb647591161015a578063c4ae3168116100c1578063e985e9c51161007a578063e985e9c514610821578063ebf0c71714610841578063f2fde38b14610857578063f534b35714610877578063f8a987d814610897578063fbe1aa51146108ad57600080fd5b8063c4ae31681461076d578063c87b56dd14610782578063caf8a6d1146107a2578063d53150fc146107be578063d5abeb01146107eb578063d755f16a1461080157600080fd5b8063a22cb46511610113578063a22cb465146106ba578063a98c35eb146106da578063b1c3a047146106ed578063b390c0ab1461070d578063b88d4fde1461072d578063c34b16151461074d57600080fd5b80637cb64759146105825780637e6d3a5c146105a25780638da5cb5b146105b557806390aa0b0f146105d35780639231ab2a1461068557806395d89b41146106a557600080fd5b806342842e0e116101fe5780635cae01d3116101b75780635cae01d3146104db5780636352211e146104f15780636f8b44b01461051157806370a0823114610531578063715018a6146105515780637a1c4a561461056657600080fd5b806342842e0e146104165780634c1b4123146104365780634f6ccce71461046e57806355f804b31461048e57806359f369fe146104ae5780635c975abb146104c357600080fd5b806323b872dd1161025057806323b872dd146103615780632a09f2f2146103815780632f745c59146103a157806339ec95ac146103c15780633aecd0e3146103d45780633ccfd60b1461040157600080fd5b806301ffc9a71461028d57806306fdde03146102c2578063081812fc146102e4578063095ea7b31461031c57806318160ddd1461033e575b600080fd5b34801561029957600080fd5b506102ad6102a836600461319a565b6108f6565b60405190151581526020015b60405180910390f35b3480156102ce57600080fd5b506102d7610963565b6040516102b9919061320f565b3480156102f057600080fd5b506103046102ff366004613222565b6109f5565b6040516001600160a01b0390911681526020016102b9565b34801561032857600080fd5b5061033c610337366004613250565b610a85565b005b34801561034a57600080fd5b50610353610b9d565b6040519081526020016102b9565b34801561036d57600080fd5b5061033c61037c36600461327c565b610bb9565b34801561038d57600080fd5b5061033c61039c366004613222565b610bea565b3480156103ad57600080fd5b506103536103bc366004613250565b610c19565b61033c6103cf3660046132d4565b610ce2565b3480156103e057600080fd5b506103f46103ef3660046132ef565b610f81565b6040516102b9919061330c565b34801561040d57600080fd5b5061033c611067565b34801561042257600080fd5b5061033c61043136600461327c565b61117c565b34801561044257600080fd5b506104566104513660046132d4565b611197565b6040516001600160401b0390911681526020016102b9565b34801561047a57600080fd5b50610353610489366004613222565b611261565b34801561049a57600080fd5b5061033c6104a93660046133db565b611319565b3480156104ba57600080fd5b5061045661135a565b3480156104cf57600080fd5b5060005460ff166102ad565b3480156104e757600080fd5b5061045661025881565b3480156104fd57600080fd5b5061030461050c366004613222565b61138f565b34801561051d57600080fd5b5061033c61052c366004613222565b61139b565b34801561053d57600080fd5b5061035361054c3660046132ef565b611463565b34801561055d57600080fd5b5061033c611532565b34801561057257600080fd5b506104566706f05b59d3b2000081565b34801561058e57600080fd5b5061033c61059d366004613222565b611568565b61033c6105b0366004613423565b611597565b3480156105c157600080fd5b50600a546001600160a01b0316610304565b3480156105df57600080fd5b50600c54600d54600e5461062f9263ffffffff80821693600160201b808404831694600160401b8086046001600160401b0390811696600160801b90041694808316938304811692919091041688565b6040805163ffffffff998a16815297891660208901526001600160401b03968716908801529490931660608601526080850191909152841660a0840152831660c08301529190911660e0820152610100016102b9565b34801561069157600080fd5b506103046106a0366004613222565b611984565b3480156106b157600080fd5b506102d761198f565b3480156106c657600080fd5b5061033c6106d53660046134a8565b61199e565b61033c6106e83660046134e6565b611a63565b3480156106f957600080fd5b5061033c6107083660046132d4565b611d56565b34801561071957600080fd5b5061033c610728366004613502565b611e27565b34801561073957600080fd5b5061033c610748366004613524565b611e84565b34801561075957600080fd5b5061033c6107683660046135b7565b611eb6565b34801561077957600080fd5b5061033c6120df565b34801561078e57600080fd5b506102d761079d366004613222565b612123565b3480156107ae57600080fd5b5061045667016345785d8a000081565b3480156107ca57600080fd5b506103536107d93660046132ef565b60136020526000908152604090205481565b3480156107f757600080fd5b5061035360105481565b34801561080d57600080fd5b506102ad61081c36600461360b565b6121e8565b34801561082d57600080fd5b506102ad61083c366004613647565b61221b565b34801561084d57600080fd5b5061035360115481565b34801561086357600080fd5b5061033c6108723660046132ef565b6122e7565b34801561088357600080fd5b5061033c610892366004613675565b61237f565b3480156108a357600080fd5b5061045661384081565b3480156108b957600080fd5b506108e17f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102b9565b60006001600160e01b031982166380ac58cd60e01b148061092757506001600160e01b03198216635b5e139f60e01b145b8061094257506001600160e01b0319821663780e9d6360e01b145b8061095d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060048054610972906136af565b80601f016020809104026020016040519081016040528092919081815260200182805461099e906136af565b80156109eb5780601f106109c0576101008083540402835291602001916109eb565b820191906000526020600020905b8154815290600101906020018083116109ce57829003601f168201915b5050505050905090565b6000610a008261241e565b610a695760405162461bcd60e51b815260206004820152602f60248201527f4552433732315073693a20617070726f76656420717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084015b60405180910390fd5b506000908152600860205260409020546001600160a01b031690565b6000610a908261138f565b9050806001600160a01b0316836001600160a01b03161415610b005760405162461bcd60e51b8152602060048201526024808201527f4552433732315073693a20617070726f76616c20746f2063757272656e74206f6044820152633bb732b960e11b6064820152608401610a60565b336001600160a01b0382161480610b1c5750610b1c813361221b565b610b8e5760405162461bcd60e51b815260206004820152603b60248201527f4552433732315073693a20617070726f76652063616c6c6572206973206e6f7460448201527f206f776e6572206e6f7220617070726f76656420666f7220616c6c00000000006064820152608401610a60565b610b98838361245d565b505050565b6000610ba76124cb565b600754610bb49190613700565b905090565b610bc3338261252b565b610bdf5760405162461bcd60e51b8152600401610a6090613717565b610b988383836125f0565b600a546001600160a01b03163314610c145760405162461bcd60e51b8152600401610a609061376b565b600d55565b60008060005b600354811015610c8d57610c328161241e565b8015610c575750610c428161138f565b6001600160a01b0316856001600160a01b0316145b15610c7b5783821415610c6d57915061095d9050565b81610c77816137a0565b9250505b80610c85816137a0565b915050610c1f565b5060405162461bcd60e51b8152602060048201526024808201527f4552433732315073693a206f776e657220696e646578206f7574206f6620626f604482015263756e647360e01b6064820152608401610a60565b333214610d015760405162461bcd60e51b8152600401610a60906137bb565b60005460ff1615610d245760405162461bcd60e51b8152600401610a60906137f2565b600c5463ffffffff168015801590610d455750806001600160401b03164210155b610d915760405162461bcd60e51b815260206004820152601b60248201527f41756374696f6e20686173206e6f7420737461727465642079657400000000006044820152606401610a60565b6000826001600160401b031611610dba5760405162461bcd60e51b8152600401610a609061381c565b600e5463ffffffff908116906001600160401b038416907f000000000000000000000000000000000000000000000000000000000000000016610dfb610b9d565b610e05919061385e565b610e0f919061385e565b1115610e695760405162461bcd60e51b8152602060048201526024808201527f526573657276656420616d6f756e7420657863656564656420666f72206175636044820152633a34b7b760e11b6064820152608401610a60565b600e5433600090815260136020526040902054600160201b90910463ffffffff1690610e9f906001600160401b0385169061385e565b1115610eed5760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420616c6c6f77656420746f206d696e74207468617420616d6f756e74006044820152606401610a60565b600082610ef983611197565b610f039190613876565b9050806001600160401b0316341015610f2e5760405162461bcd60e51b8152600401610a60906138a5565b610f4133846001600160401b0316612800565b33600090815260136020526040812080546001600160401b0386169290610f6990849061385e565b90915550610b9890506001600160401b03821661281a565b60606000610f8e83611463565b90506000816001600160401b03811115610faa57610faa613350565b604051908082528060200260200182016040528015610fd3578160200160208202803683370190505b50905081156110285760005b8281101561102057610ff18582610c19565b828281518110611003576110036138dc565b602090810291909101015280611018816137a0565b915050610fdf565b509392505050565b60405162461bcd60e51b81526020600482015260146024820152734f776e657220686173206e6f2062616c616e636560601b6044820152606401610a60565b600a546001600160a01b031633146110915760405162461bcd60e51b8152600401610a609061376b565b6002600b5414156110e45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a60565b6002600b55604051600090339047908381818185875af1925050503d806000811461112b576040519150601f19603f3d011682016040523d82523d6000602084013e611130565b606091505b50509050806111745760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610a60565b506001600b55565b610b9883838360405180602001604052806000815250611e84565b6000816001600160401b03164210156111b957506706f05b59d3b20000919050565b6138406111cf6001600160401b03841642613700565b106111e3575067016345785d8a0000919050565b60006102586111fb6001600160401b03851642613700565b6112059190613908565b9050611215610258613840613908565b61122f67016345785d8a00006706f05b59d3b2000061392e565b6112399190613908565b6112439082613876565b611255906706f05b59d3b2000061392e565b9392505050565b919050565b600061126b610b9d565b82106112c75760405162461bcd60e51b815260206004820152602560248201527f4552433732315073693a20676c6f62616c20696e646578206f7574206f6620626044820152646f756e647360d81b6064820152608401610a60565b6000805b600354811015611312576112de8161241e565b1561130057838214156112f2579392505050565b816112fc816137a0565b9250505b8061130a816137a0565b9150506112cb565b5050919050565b600a546001600160a01b031633146113435760405162461bcd60e51b8152600401610a609061376b565b80516113569060129060208401906130eb565b5050565b611368610258613840613908565b61138267016345785d8a00006706f05b59d3b2000061392e565b61138c9190613908565b81565b60008061102083612858565b600a546001600160a01b031633146113c55760405162461bcd60e51b8152600401610a609061376b565b6113cd610b9d565b811180156113dd57506010548111155b61145e5760405162461bcd60e51b815260206004820152604660248201527f416d6f756e742073686f756c642062652067726561746572207468616e20637560448201527f7272656e7420737570706c7920616e64206c6f776572207468616e206d617820606482015265737570706c7960d01b608482015260a401610a60565b601055565b60006001600160a01b0382166114d15760405162461bcd60e51b815260206004820152602d60248201527f4552433732315073693a2062616c616e636520717565727920666f722074686560448201526c207a65726f206164647265737360981b6064820152608401610a60565b6000805b60035481101561152b576114e88161241e565b1561151b576114f68161138f565b6001600160a01b0316846001600160a01b0316141561151b57611518826137a0565b91505b611524816137a0565b90506114d5565b5092915050565b600a546001600160a01b0316331461155c5760405162461bcd60e51b8152600401610a609061376b565b61156660006128ef565b565b600a546001600160a01b031633146115925760405162461bcd60e51b8152600401610a609061376b565b601155565b818161160e828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506011546040516bffffffffffffffffffffffff193360601b166020820152909250603401905060405160208183030381529060405280519060200120612941565b151560011461165f5760405162461bcd60e51b815260206004820152601b60248201527f596f7520617265206e6f7420616c6c6f77656420746f206d696e7400000000006044820152606401610a60565b33321461167e5760405162461bcd60e51b8152600401610a60906137bb565b60005460ff16156116a15760405162461bcd60e51b8152600401610a60906137f2565b600c54600160401b90046001600160401b0316806117015760405162461bcd60e51b815260206004820152601b60248201527f50726573616c6520686173206e6f7420737461727465642079657400000000006044820152606401610a60565b6000866001600160401b03161161172a5760405162461bcd60e51b8152600401610a609061381c565b600e54600160201b900463ffffffff166001600160401b03871611156117a25760405162461bcd60e51b815260206004820152602760248201527f52657175657374656420616d6f756e7420697320686967686572207468616e20604482015266185b1b1bddd95960ca1b6064820152608401610a60565b600e5433600090815260136020526040902054600160201b90910463ffffffff16906117d8906001600160401b0389169061385e565b111561185d5760405162461bcd60e51b815260206004820152604860248201527f596f7520616c7265616479206d696e74656420736f6d65206265666f72652c2060448201527f706c65617365207265636f6e73696465722074686520616d6f756e7420796f75606482015267081c995c5d595cdd60c21b608482015260a401610a60565b601054866001600160401b03167f000000000000000000000000000000000000000000000000000000000000000063ffffffff16611899610b9d565b6118a3919061385e565b6118ad919061385e565b11156118f15760405162461bcd60e51b81526020600482015260136024820152724578636565646564206d617820737570706c7960681b6044820152606401610a60565b60006118fd8783613876565b9050806001600160401b03163410156119285760405162461bcd60e51b8152600401610a60906138a5565b61193b33886001600160401b0316612800565b33600090815260136020526040812080546001600160401b038a16929061196390849061385e565b9091555061197b90506001600160401b03821661281a565b50505050505050565b600061095d8261138f565b606060058054610972906136af565b6001600160a01b0382163314156119f75760405162461bcd60e51b815260206004820152601c60248201527f4552433732315073693a20617070726f766520746f2063616c6c6572000000006044820152606401610a60565b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b333214611a825760405162461bcd60e51b8152600401610a60906137bb565b60005460ff1615611aa55760405162461bcd60e51b8152600401610a60906137f2565b600c54600d54600160801b9091046001600160401b0316908214611b0b5760405162461bcd60e51b815260206004820152601960248201527f496e636f7272656374207075626c69632073616c65206b6579000000000000006044820152606401610a60565b600c54600d54611b3991600160801b81046001600160401b03169190600160201b900463ffffffff166121e8565b611b855760405162461bcd60e51b815260206004820152601e60248201527f5075626c696373616c6520686173206e6f7420737461727465642079657400006044820152606401610a60565b6000836001600160401b031611611bae5760405162461bcd60e51b8152600401610a609061381c565b600e5433600090815260136020526040902054600160401b90910463ffffffff1690611be4906001600160401b0386169061385e565b1115611c325760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420616c6c6f77656420746f206d696e74207468617420616d6f756e74006044820152606401610a60565b601054836001600160401b03167f000000000000000000000000000000000000000000000000000000000000000063ffffffff16611c6e610b9d565b611c78919061385e565b611c82919061385e565b1115611cc65760405162461bcd60e51b81526020600482015260136024820152724578636565646564206d617820737570706c7960681b6044820152606401610a60565b6000611cd28483613876565b9050806001600160401b0316341015611cfd5760405162461bcd60e51b8152600401610a60906138a5565b611d1033856001600160401b0316612800565b33600090815260136020526040812080546001600160401b0387169290611d3890849061385e565b90915550611d5090506001600160401b03821661281a565b50505050565b600a546001600160a01b03163314611d805760405162461bcd60e51b8152600401610a609061376b565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16816001600160401b0316611db9610b9d565b611dc3919061385e565b1115611e115760405162461bcd60e51b815260206004820152601860248201527f457863656564656420726573657276656420616d6f756e7400000000000000006044820152606401610a60565b611e2433826001600160401b0316612800565b50565b600a546001600160a01b03163314611e515760405162461bcd60e51b8152600401610a609061376b565b815b818111610b9857611e64338261252b565b15611e7257611e7281612957565b80611e7c816137a0565b915050611e53565b611e8e338361252b565b611eaa5760405162461bcd60e51b8152600401610a6090613717565b611d50848484846129ab565b600a546001600160a01b03163314611ee05760405162461bcd60e51b8152600401610a609061376b565b63ffffffff841615801590611efb5750428463ffffffff1610155b611f535760405162461bcd60e51b8152602060048201526024808201527f496e76616c696420656e74727920666f722061756374696f6e2073746172742060448201526374696d6560e01b6064820152608401610a60565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16601054611f879190613700565b8363ffffffff1611156120025760405162461bcd60e51b815260206004820152603b60248201527f5468657265206973206e6f7420656e6f75676820737570706c7920746f20636f60448201527f766572207468617420616d6f756e7420666f722061756374696f6e00000000006064820152608401610a60565b8163ffffffff168163ffffffff1610156120845760405162461bcd60e51b815260206004820152603960248201527f4d6178206c696d69742073686f756c642062652067726561746572206f72206560448201527f7175616c20746f207468652070726573616c65206c696d6974000000000000006064820152608401610a60565b600c805463ffffffff95861663ffffffff19909116179055600e8054918516600160401b026bffffffff000000000000000019938616600160201b0267ffffffffffffffff1990931694909516939093171716919091179055565b600a546001600160a01b031633146121095760405162461bcd60e51b8152600401610a609061376b565b60005460ff1661211b576115666129e0565b611566612a55565b606061212e8261241e565b61218d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732315073693a2055524920717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610a60565b6000612197612acf565b905060008151116121b75760405180602001604052806000815250611255565b806121c184612ade565b6040516020016121d2929190613956565b6040516020818303038152906040529392505050565b60006001600160401b0384161580159061220157508215155b80156122135750428263ffffffff1611155b949350505050565b600f5460405163c455279160e01b81526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b15801561226857600080fd5b505afa15801561227c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a09190613985565b6001600160a01b031614156122b957600191505061095d565b6001600160a01b0380851660009081526009602090815260408083209387168352929052205460ff16612213565b600a546001600160a01b031633146123115760405162461bcd60e51b8152600401610a609061376b565b6001600160a01b0381166123765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a60565b611e24816128ef565b600a546001600160a01b031633146123a95760405162461bcd60e51b8152600401610a609061376b565b600c805477ffffffffffffffffffffffffffffffff00000000000000001916600160401b6001600160401b039586160267ffffffffffffffff60801b191617600160801b93909416929092029290921767ffffffff000000001916600160201b63ffffffff9390931692909202919091179055565b600881901c600090815260026020526040812054600160ff1b60ff84161c16151580612448575081155b1561245557506000919050565b506003541190565b600081815260086020526040902080546001600160a01b0319166001600160a01b03841690811790915581906124928261138f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806008600754901c60016124e1919061385e565b905060005b818110156125265760008181526002602052604090205461250681612bdb565b612510908561385e565b935050808061251e906137a0565b9150506124e6565b505090565b60006125368261241e565b61259a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732315073693a206f70657261746f7220717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610a60565b60006125a58361138f565b9050806001600160a01b0316846001600160a01b031614806125e05750836001600160a01b03166125d5846109f5565b6001600160a01b0316145b806122135750612213818561221b565b60005460ff16156126135760405162461bcd60e51b8152600401610a60906137f2565b60008061261f83612858565b91509150846001600160a01b0316826001600160a01b0316146126995760405162461bcd60e51b815260206004820152602c60248201527f4552433732315073693a207472616e73666572206f6620746f6b656e2074686160448201526b3a1034b9903737ba1037bbb760a11b6064820152608401610a60565b6001600160a01b0384166126ff5760405162461bcd60e51b815260206004820152602760248201527f4552433732315073693a207472616e7366657220746f20746865207a65726f206044820152666164647265737360c81b6064820152608401610a60565b61270a60008461245d565b600061271784600161385e565b600881901c600090815260016020526040902054909150600160ff1b60ff83161c16158015612747575060035481105b1561277e57600081815260066020526040902080546001600160a01b0319166001600160a01b03881617905561277e600182612bf5565b600084815260066020526040902080546001600160a01b0319166001600160a01b0387161790558184146127b7576127b7600185612bf5565b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b611356828260405180602001604052806000815250612c21565b80341115611e2457336108fc6128308334613700565b6040518115909202916000818181858888f19350505050158015611356573d6000803e3d6000fd5b6000806128648361241e565b6128c55760405162461bcd60e51b815260206004820152602c60248201527f4552433732315073693a206f776e657220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a60565b6128ce83612c3c565b6000818152600660205260409020546001600160a01b031694909350915050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008261294e8584612c49565b14949350505050565b60006129628261138f565b905061296f600283612bf5565b60405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6129b68484846125f0565b6129c4848484600185612cb5565b611d505760405162461bcd60e51b8152600401610a60906139a2565b60005460ff1615612a035760405162461bcd60e51b8152600401610a60906137f2565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a383390565b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16612a9e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a60565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612a38565b606060128054610972906136af565b606081612b025750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612b2c5780612b16816137a0565b9150612b259050600a836139f7565b9150612b06565b6000816001600160401b03811115612b4657612b46613350565b6040519080825280601f01601f191660200182016040528015612b70576020820181803683370190505b5090505b841561221357612b85600183613700565b9150612b92600a86613a0b565b612b9d90603061385e565b60f81b818381518110612bb257612bb26138dc565b60200101906001600160f81b031916908160001a905350612bd4600a866139f7565b9450612b74565b60005b811561125c57600019820190911690600101612bde565b600881901c600090815260209290925260409091208054600160ff1b60ff9093169290921c9091179055565b600354612c2e8484612df8565b6129c4600085838686612cb5565b600061095d600183612f74565b600081815b8451811015611020576000858281518110612c6b57612c6b6138dc565b60200260200101519050808311612c915760008381526020829052604090209250612ca2565b600081815260208490526040902092505b5080612cad816137a0565b915050612c4e565b60006001600160a01b0385163b15612deb57506001835b612cd6848661385e565b811015612de557604051630a85bd0160e11b81526001600160a01b0387169063150b7a0290612d0f9033908b9086908990600401613a1f565b602060405180830381600087803b158015612d2957600080fd5b505af1925050508015612d59575060408051601f3d908101601f19168201909252612d5691810190613a5c565b60015b612db3573d808015612d87576040519150601f19603f3d011682016040523d82523d6000602084013e612d8c565b606091505b508051612dab5760405162461bcd60e51b8152600401610a60906139a2565b805181602001fd5b828015612dd057506001600160e01b03198116630a85bd0160e11b145b92505080612ddd816137a0565b915050612ccc565b50612def565b5060015b95945050505050565b60035481612e5e5760405162461bcd60e51b815260206004820152602d60248201527f4552433732315073693a207175616e74697479206d757374206265206772656160448201526c746572207468616e207a65726f60981b6064820152608401610a60565b6001600160a01b038316612ec05760405162461bcd60e51b815260206004820152602360248201527f4552433732315073693a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a60565b8160076000828254612ed2919061385e565b9091555050600081815260066020526040902080546001600160a01b0319166001600160a01b038516179055612f09600182612bf5565b805b612f15838361385e565b811015611d505760405181906001600160a01b038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4612f5f81600161385e565b60035580612f6c816137a0565b915050612f0b565b600881901c60008181526020849052604081205490919060ff808516919082181c8015612fb957612fa481613069565b60ff168203600884901b17935050505061095d565b600083116130265760405162461bcd60e51b815260206004820152603460248201527f4269744d6170733a205468652073657420626974206265666f7265207468652060448201527334b73232bc103237b2b9b713ba1032bc34b9ba1760611b6064820152608401610a60565b5060001990910160008181526020869052604090205490919080156130645761304e81613069565b60ff0360ff16600884901b17935050505061095d565b612fb9565b60006040518061012001604052806101008152602001613a7a610100913960f87e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff6130b2856130d3565b02901c815181106130c5576130c56138dc565b016020015160f81c92915050565b60008082116130e157600080fd5b5060008190031690565b8280546130f7906136af565b90600052602060002090601f016020900481019282613119576000855561315f565b82601f1061313257805160ff191683800117855561315f565b8280016001018555821561315f579182015b8281111561315f578251825591602001919060010190613144565b5061316b92915061316f565b5090565b5b8082111561316b5760008155600101613170565b6001600160e01b031981168114611e2457600080fd5b6000602082840312156131ac57600080fd5b813561125581613184565b60005b838110156131d25781810151838201526020016131ba565b83811115611d505750506000910152565b600081518084526131fb8160208601602086016131b7565b601f01601f19169290920160200192915050565b60208152600061125560208301846131e3565b60006020828403121561323457600080fd5b5035919050565b6001600160a01b0381168114611e2457600080fd5b6000806040838503121561326357600080fd5b823561326e8161323b565b946020939093013593505050565b60008060006060848603121561329157600080fd5b833561329c8161323b565b925060208401356132ac8161323b565b929592945050506040919091013590565b80356001600160401b038116811461125c57600080fd5b6000602082840312156132e657600080fd5b611255826132bd565b60006020828403121561330157600080fd5b81356112558161323b565b6020808252825182820181905260009190848201906040850190845b8181101561334457835183529284019291840191600101613328565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561338057613380613350565b604051601f8501601f19908116603f011681019082821181831017156133a8576133a8613350565b816040528093508581528686860111156133c157600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156133ed57600080fd5b81356001600160401b0381111561340357600080fd5b8201601f8101841361341457600080fd5b61221384823560208401613366565b60008060006040848603121561343857600080fd5b613441846132bd565b925060208401356001600160401b038082111561345d57600080fd5b818601915086601f83011261347157600080fd5b81358181111561348057600080fd5b8760208260051b850101111561349557600080fd5b6020830194508093505050509250925092565b600080604083850312156134bb57600080fd5b82356134c68161323b565b9150602083013580151581146134db57600080fd5b809150509250929050565b600080604083850312156134f957600080fd5b61326e836132bd565b6000806040838503121561351557600080fd5b50508035926020909101359150565b6000806000806080858703121561353a57600080fd5b84356135458161323b565b935060208501356135558161323b565b92506040850135915060608501356001600160401b0381111561357757600080fd5b8501601f8101871361358857600080fd5b61359787823560208401613366565b91505092959194509250565b803563ffffffff8116811461125c57600080fd5b600080600080608085870312156135cd57600080fd5b6135d6856135a3565b93506135e4602086016135a3565b92506135f2604086016135a3565b9150613600606086016135a3565b905092959194509250565b60008060006060848603121561362057600080fd5b613629846132bd565b92506020840135915061363e604085016135a3565b90509250925092565b6000806040838503121561365a57600080fd5b82356136658161323b565b915060208301356134db8161323b565b60008060006060848603121561368a57600080fd5b613693846132bd565b92506136a1602085016132bd565b915061363e604085016135a3565b600181811c908216806136c357607f821691505b602082108114156136e457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613712576137126136ea565b500390565b60208082526034908201527f4552433732315073693a207472616e736665722063616c6c6572206973206e6f6040820152731d081bdddb995c881b9bdc88185c1c1c9bdd995960621b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006000198214156137b4576137b46136ea565b5060010190565b6020808252601e908201527f5468652063616c6c657220697320616e6f7468657220636f6e74726163740000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526022908201527f416d6f756e742073686f756c642062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60008219821115613871576138716136ea565b500190565b60006001600160401b038083168185168183048111821515161561389c5761389c6136ea565b02949350505050565b6020808252601f908201527f5061796d656e74206973206c6f776572207468616e206e656365737361727900604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60006001600160401b0380841680613922576139226138f2565b92169190910492915050565b60006001600160401b038381169083168181101561394e5761394e6136ea565b039392505050565b600083516139688184602088016131b7565b83519083019061397c8183602088016131b7565b01949350505050565b60006020828403121561399757600080fd5b81516112558161323b565b60208082526035908201527f4552433732315073693a207472616e7366657220746f206e6f6e20455243373260408201527418a932b1b2b4bb32b91034b6b83632b6b2b73a32b960591b606082015260800190565b600082613a0657613a066138f2565b500490565b600082613a1a57613a1a6138f2565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a52908301846131e3565b9695505050505050565b600060208284031215613a6e57600080fd5b81516112558161318456fe0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8a2646970667358221220b3fccfedb5acff6d1d42e4455420b721807c5ead68691c7f603e90f4179ec11264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c80637cb647591161015a578063c4ae3168116100c1578063e985e9c51161007a578063e985e9c514610821578063ebf0c71714610841578063f2fde38b14610857578063f534b35714610877578063f8a987d814610897578063fbe1aa51146108ad57600080fd5b8063c4ae31681461076d578063c87b56dd14610782578063caf8a6d1146107a2578063d53150fc146107be578063d5abeb01146107eb578063d755f16a1461080157600080fd5b8063a22cb46511610113578063a22cb465146106ba578063a98c35eb146106da578063b1c3a047146106ed578063b390c0ab1461070d578063b88d4fde1461072d578063c34b16151461074d57600080fd5b80637cb64759146105825780637e6d3a5c146105a25780638da5cb5b146105b557806390aa0b0f146105d35780639231ab2a1461068557806395d89b41146106a557600080fd5b806342842e0e116101fe5780635cae01d3116101b75780635cae01d3146104db5780636352211e146104f15780636f8b44b01461051157806370a0823114610531578063715018a6146105515780637a1c4a561461056657600080fd5b806342842e0e146104165780634c1b4123146104365780634f6ccce71461046e57806355f804b31461048e57806359f369fe146104ae5780635c975abb146104c357600080fd5b806323b872dd1161025057806323b872dd146103615780632a09f2f2146103815780632f745c59146103a157806339ec95ac146103c15780633aecd0e3146103d45780633ccfd60b1461040157600080fd5b806301ffc9a71461028d57806306fdde03146102c2578063081812fc146102e4578063095ea7b31461031c57806318160ddd1461033e575b600080fd5b34801561029957600080fd5b506102ad6102a836600461319a565b6108f6565b60405190151581526020015b60405180910390f35b3480156102ce57600080fd5b506102d7610963565b6040516102b9919061320f565b3480156102f057600080fd5b506103046102ff366004613222565b6109f5565b6040516001600160a01b0390911681526020016102b9565b34801561032857600080fd5b5061033c610337366004613250565b610a85565b005b34801561034a57600080fd5b50610353610b9d565b6040519081526020016102b9565b34801561036d57600080fd5b5061033c61037c36600461327c565b610bb9565b34801561038d57600080fd5b5061033c61039c366004613222565b610bea565b3480156103ad57600080fd5b506103536103bc366004613250565b610c19565b61033c6103cf3660046132d4565b610ce2565b3480156103e057600080fd5b506103f46103ef3660046132ef565b610f81565b6040516102b9919061330c565b34801561040d57600080fd5b5061033c611067565b34801561042257600080fd5b5061033c61043136600461327c565b61117c565b34801561044257600080fd5b506104566104513660046132d4565b611197565b6040516001600160401b0390911681526020016102b9565b34801561047a57600080fd5b50610353610489366004613222565b611261565b34801561049a57600080fd5b5061033c6104a93660046133db565b611319565b3480156104ba57600080fd5b5061045661135a565b3480156104cf57600080fd5b5060005460ff166102ad565b3480156104e757600080fd5b5061045661025881565b3480156104fd57600080fd5b5061030461050c366004613222565b61138f565b34801561051d57600080fd5b5061033c61052c366004613222565b61139b565b34801561053d57600080fd5b5061035361054c3660046132ef565b611463565b34801561055d57600080fd5b5061033c611532565b34801561057257600080fd5b506104566706f05b59d3b2000081565b34801561058e57600080fd5b5061033c61059d366004613222565b611568565b61033c6105b0366004613423565b611597565b3480156105c157600080fd5b50600a546001600160a01b0316610304565b3480156105df57600080fd5b50600c54600d54600e5461062f9263ffffffff80821693600160201b808404831694600160401b8086046001600160401b0390811696600160801b90041694808316938304811692919091041688565b6040805163ffffffff998a16815297891660208901526001600160401b03968716908801529490931660608601526080850191909152841660a0840152831660c08301529190911660e0820152610100016102b9565b34801561069157600080fd5b506103046106a0366004613222565b611984565b3480156106b157600080fd5b506102d761198f565b3480156106c657600080fd5b5061033c6106d53660046134a8565b61199e565b61033c6106e83660046134e6565b611a63565b3480156106f957600080fd5b5061033c6107083660046132d4565b611d56565b34801561071957600080fd5b5061033c610728366004613502565b611e27565b34801561073957600080fd5b5061033c610748366004613524565b611e84565b34801561075957600080fd5b5061033c6107683660046135b7565b611eb6565b34801561077957600080fd5b5061033c6120df565b34801561078e57600080fd5b506102d761079d366004613222565b612123565b3480156107ae57600080fd5b5061045667016345785d8a000081565b3480156107ca57600080fd5b506103536107d93660046132ef565b60136020526000908152604090205481565b3480156107f757600080fd5b5061035360105481565b34801561080d57600080fd5b506102ad61081c36600461360b565b6121e8565b34801561082d57600080fd5b506102ad61083c366004613647565b61221b565b34801561084d57600080fd5b5061035360115481565b34801561086357600080fd5b5061033c6108723660046132ef565b6122e7565b34801561088357600080fd5b5061033c610892366004613675565b61237f565b3480156108a357600080fd5b5061045661384081565b3480156108b957600080fd5b506108e17f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102b9565b60006001600160e01b031982166380ac58cd60e01b148061092757506001600160e01b03198216635b5e139f60e01b145b8061094257506001600160e01b0319821663780e9d6360e01b145b8061095d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060048054610972906136af565b80601f016020809104026020016040519081016040528092919081815260200182805461099e906136af565b80156109eb5780601f106109c0576101008083540402835291602001916109eb565b820191906000526020600020905b8154815290600101906020018083116109ce57829003601f168201915b5050505050905090565b6000610a008261241e565b610a695760405162461bcd60e51b815260206004820152602f60248201527f4552433732315073693a20617070726f76656420717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084015b60405180910390fd5b506000908152600860205260409020546001600160a01b031690565b6000610a908261138f565b9050806001600160a01b0316836001600160a01b03161415610b005760405162461bcd60e51b8152602060048201526024808201527f4552433732315073693a20617070726f76616c20746f2063757272656e74206f6044820152633bb732b960e11b6064820152608401610a60565b336001600160a01b0382161480610b1c5750610b1c813361221b565b610b8e5760405162461bcd60e51b815260206004820152603b60248201527f4552433732315073693a20617070726f76652063616c6c6572206973206e6f7460448201527f206f776e6572206e6f7220617070726f76656420666f7220616c6c00000000006064820152608401610a60565b610b98838361245d565b505050565b6000610ba76124cb565b600754610bb49190613700565b905090565b610bc3338261252b565b610bdf5760405162461bcd60e51b8152600401610a6090613717565b610b988383836125f0565b600a546001600160a01b03163314610c145760405162461bcd60e51b8152600401610a609061376b565b600d55565b60008060005b600354811015610c8d57610c328161241e565b8015610c575750610c428161138f565b6001600160a01b0316856001600160a01b0316145b15610c7b5783821415610c6d57915061095d9050565b81610c77816137a0565b9250505b80610c85816137a0565b915050610c1f565b5060405162461bcd60e51b8152602060048201526024808201527f4552433732315073693a206f776e657220696e646578206f7574206f6620626f604482015263756e647360e01b6064820152608401610a60565b333214610d015760405162461bcd60e51b8152600401610a60906137bb565b60005460ff1615610d245760405162461bcd60e51b8152600401610a60906137f2565b600c5463ffffffff168015801590610d455750806001600160401b03164210155b610d915760405162461bcd60e51b815260206004820152601b60248201527f41756374696f6e20686173206e6f7420737461727465642079657400000000006044820152606401610a60565b6000826001600160401b031611610dba5760405162461bcd60e51b8152600401610a609061381c565b600e5463ffffffff908116906001600160401b038416907f000000000000000000000000000000000000000000000000000000000000000016610dfb610b9d565b610e05919061385e565b610e0f919061385e565b1115610e695760405162461bcd60e51b8152602060048201526024808201527f526573657276656420616d6f756e7420657863656564656420666f72206175636044820152633a34b7b760e11b6064820152608401610a60565b600e5433600090815260136020526040902054600160201b90910463ffffffff1690610e9f906001600160401b0385169061385e565b1115610eed5760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420616c6c6f77656420746f206d696e74207468617420616d6f756e74006044820152606401610a60565b600082610ef983611197565b610f039190613876565b9050806001600160401b0316341015610f2e5760405162461bcd60e51b8152600401610a60906138a5565b610f4133846001600160401b0316612800565b33600090815260136020526040812080546001600160401b0386169290610f6990849061385e565b90915550610b9890506001600160401b03821661281a565b60606000610f8e83611463565b90506000816001600160401b03811115610faa57610faa613350565b604051908082528060200260200182016040528015610fd3578160200160208202803683370190505b50905081156110285760005b8281101561102057610ff18582610c19565b828281518110611003576110036138dc565b602090810291909101015280611018816137a0565b915050610fdf565b509392505050565b60405162461bcd60e51b81526020600482015260146024820152734f776e657220686173206e6f2062616c616e636560601b6044820152606401610a60565b600a546001600160a01b031633146110915760405162461bcd60e51b8152600401610a609061376b565b6002600b5414156110e45760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a60565b6002600b55604051600090339047908381818185875af1925050503d806000811461112b576040519150601f19603f3d011682016040523d82523d6000602084013e611130565b606091505b50509050806111745760405162461bcd60e51b815260206004820152601060248201526f2a3930b739b332b9103330b4b632b21760811b6044820152606401610a60565b506001600b55565b610b9883838360405180602001604052806000815250611e84565b6000816001600160401b03164210156111b957506706f05b59d3b20000919050565b6138406111cf6001600160401b03841642613700565b106111e3575067016345785d8a0000919050565b60006102586111fb6001600160401b03851642613700565b6112059190613908565b9050611215610258613840613908565b61122f67016345785d8a00006706f05b59d3b2000061392e565b6112399190613908565b6112439082613876565b611255906706f05b59d3b2000061392e565b9392505050565b919050565b600061126b610b9d565b82106112c75760405162461bcd60e51b815260206004820152602560248201527f4552433732315073693a20676c6f62616c20696e646578206f7574206f6620626044820152646f756e647360d81b6064820152608401610a60565b6000805b600354811015611312576112de8161241e565b1561130057838214156112f2579392505050565b816112fc816137a0565b9250505b8061130a816137a0565b9150506112cb565b5050919050565b600a546001600160a01b031633146113435760405162461bcd60e51b8152600401610a609061376b565b80516113569060129060208401906130eb565b5050565b611368610258613840613908565b61138267016345785d8a00006706f05b59d3b2000061392e565b61138c9190613908565b81565b60008061102083612858565b600a546001600160a01b031633146113c55760405162461bcd60e51b8152600401610a609061376b565b6113cd610b9d565b811180156113dd57506010548111155b61145e5760405162461bcd60e51b815260206004820152604660248201527f416d6f756e742073686f756c642062652067726561746572207468616e20637560448201527f7272656e7420737570706c7920616e64206c6f776572207468616e206d617820606482015265737570706c7960d01b608482015260a401610a60565b601055565b60006001600160a01b0382166114d15760405162461bcd60e51b815260206004820152602d60248201527f4552433732315073693a2062616c616e636520717565727920666f722074686560448201526c207a65726f206164647265737360981b6064820152608401610a60565b6000805b60035481101561152b576114e88161241e565b1561151b576114f68161138f565b6001600160a01b0316846001600160a01b0316141561151b57611518826137a0565b91505b611524816137a0565b90506114d5565b5092915050565b600a546001600160a01b0316331461155c5760405162461bcd60e51b8152600401610a609061376b565b61156660006128ef565b565b600a546001600160a01b031633146115925760405162461bcd60e51b8152600401610a609061376b565b601155565b818161160e828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506011546040516bffffffffffffffffffffffff193360601b166020820152909250603401905060405160208183030381529060405280519060200120612941565b151560011461165f5760405162461bcd60e51b815260206004820152601b60248201527f596f7520617265206e6f7420616c6c6f77656420746f206d696e7400000000006044820152606401610a60565b33321461167e5760405162461bcd60e51b8152600401610a60906137bb565b60005460ff16156116a15760405162461bcd60e51b8152600401610a60906137f2565b600c54600160401b90046001600160401b0316806117015760405162461bcd60e51b815260206004820152601b60248201527f50726573616c6520686173206e6f7420737461727465642079657400000000006044820152606401610a60565b6000866001600160401b03161161172a5760405162461bcd60e51b8152600401610a609061381c565b600e54600160201b900463ffffffff166001600160401b03871611156117a25760405162461bcd60e51b815260206004820152602760248201527f52657175657374656420616d6f756e7420697320686967686572207468616e20604482015266185b1b1bddd95960ca1b6064820152608401610a60565b600e5433600090815260136020526040902054600160201b90910463ffffffff16906117d8906001600160401b0389169061385e565b111561185d5760405162461bcd60e51b815260206004820152604860248201527f596f7520616c7265616479206d696e74656420736f6d65206265666f72652c2060448201527f706c65617365207265636f6e73696465722074686520616d6f756e7420796f75606482015267081c995c5d595cdd60c21b608482015260a401610a60565b601054866001600160401b03167f000000000000000000000000000000000000000000000000000000000000000063ffffffff16611899610b9d565b6118a3919061385e565b6118ad919061385e565b11156118f15760405162461bcd60e51b81526020600482015260136024820152724578636565646564206d617820737570706c7960681b6044820152606401610a60565b60006118fd8783613876565b9050806001600160401b03163410156119285760405162461bcd60e51b8152600401610a60906138a5565b61193b33886001600160401b0316612800565b33600090815260136020526040812080546001600160401b038a16929061196390849061385e565b9091555061197b90506001600160401b03821661281a565b50505050505050565b600061095d8261138f565b606060058054610972906136af565b6001600160a01b0382163314156119f75760405162461bcd60e51b815260206004820152601c60248201527f4552433732315073693a20617070726f766520746f2063616c6c6572000000006044820152606401610a60565b3360008181526009602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b333214611a825760405162461bcd60e51b8152600401610a60906137bb565b60005460ff1615611aa55760405162461bcd60e51b8152600401610a60906137f2565b600c54600d54600160801b9091046001600160401b0316908214611b0b5760405162461bcd60e51b815260206004820152601960248201527f496e636f7272656374207075626c69632073616c65206b6579000000000000006044820152606401610a60565b600c54600d54611b3991600160801b81046001600160401b03169190600160201b900463ffffffff166121e8565b611b855760405162461bcd60e51b815260206004820152601e60248201527f5075626c696373616c6520686173206e6f7420737461727465642079657400006044820152606401610a60565b6000836001600160401b031611611bae5760405162461bcd60e51b8152600401610a609061381c565b600e5433600090815260136020526040902054600160401b90910463ffffffff1690611be4906001600160401b0386169061385e565b1115611c325760405162461bcd60e51b815260206004820152601f60248201527f4e6f7420616c6c6f77656420746f206d696e74207468617420616d6f756e74006044820152606401610a60565b601054836001600160401b03167f000000000000000000000000000000000000000000000000000000000000000063ffffffff16611c6e610b9d565b611c78919061385e565b611c82919061385e565b1115611cc65760405162461bcd60e51b81526020600482015260136024820152724578636565646564206d617820737570706c7960681b6044820152606401610a60565b6000611cd28483613876565b9050806001600160401b0316341015611cfd5760405162461bcd60e51b8152600401610a60906138a5565b611d1033856001600160401b0316612800565b33600090815260136020526040812080546001600160401b0387169290611d3890849061385e565b90915550611d5090506001600160401b03821661281a565b50505050565b600a546001600160a01b03163314611d805760405162461bcd60e51b8152600401610a609061376b565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16816001600160401b0316611db9610b9d565b611dc3919061385e565b1115611e115760405162461bcd60e51b815260206004820152601860248201527f457863656564656420726573657276656420616d6f756e7400000000000000006044820152606401610a60565b611e2433826001600160401b0316612800565b50565b600a546001600160a01b03163314611e515760405162461bcd60e51b8152600401610a609061376b565b815b818111610b9857611e64338261252b565b15611e7257611e7281612957565b80611e7c816137a0565b915050611e53565b611e8e338361252b565b611eaa5760405162461bcd60e51b8152600401610a6090613717565b611d50848484846129ab565b600a546001600160a01b03163314611ee05760405162461bcd60e51b8152600401610a609061376b565b63ffffffff841615801590611efb5750428463ffffffff1610155b611f535760405162461bcd60e51b8152602060048201526024808201527f496e76616c696420656e74727920666f722061756374696f6e2073746172742060448201526374696d6560e01b6064820152608401610a60565b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff16601054611f879190613700565b8363ffffffff1611156120025760405162461bcd60e51b815260206004820152603b60248201527f5468657265206973206e6f7420656e6f75676820737570706c7920746f20636f60448201527f766572207468617420616d6f756e7420666f722061756374696f6e00000000006064820152608401610a60565b8163ffffffff168163ffffffff1610156120845760405162461bcd60e51b815260206004820152603960248201527f4d6178206c696d69742073686f756c642062652067726561746572206f72206560448201527f7175616c20746f207468652070726573616c65206c696d6974000000000000006064820152608401610a60565b600c805463ffffffff95861663ffffffff19909116179055600e8054918516600160401b026bffffffff000000000000000019938616600160201b0267ffffffffffffffff1990931694909516939093171716919091179055565b600a546001600160a01b031633146121095760405162461bcd60e51b8152600401610a609061376b565b60005460ff1661211b576115666129e0565b611566612a55565b606061212e8261241e565b61218d5760405162461bcd60e51b815260206004820152602a60248201527f4552433732315073693a2055524920717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b6064820152608401610a60565b6000612197612acf565b905060008151116121b75760405180602001604052806000815250611255565b806121c184612ade565b6040516020016121d2929190613956565b6040516020818303038152906040529392505050565b60006001600160401b0384161580159061220157508215155b80156122135750428263ffffffff1611155b949350505050565b600f5460405163c455279160e01b81526001600160a01b03848116600483015260009281169190841690829063c45527919060240160206040518083038186803b15801561226857600080fd5b505afa15801561227c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122a09190613985565b6001600160a01b031614156122b957600191505061095d565b6001600160a01b0380851660009081526009602090815260408083209387168352929052205460ff16612213565b600a546001600160a01b031633146123115760405162461bcd60e51b8152600401610a609061376b565b6001600160a01b0381166123765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a60565b611e24816128ef565b600a546001600160a01b031633146123a95760405162461bcd60e51b8152600401610a609061376b565b600c805477ffffffffffffffffffffffffffffffff00000000000000001916600160401b6001600160401b039586160267ffffffffffffffff60801b191617600160801b93909416929092029290921767ffffffff000000001916600160201b63ffffffff9390931692909202919091179055565b600881901c600090815260026020526040812054600160ff1b60ff84161c16151580612448575081155b1561245557506000919050565b506003541190565b600081815260086020526040902080546001600160a01b0319166001600160a01b03841690811790915581906124928261138f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806008600754901c60016124e1919061385e565b905060005b818110156125265760008181526002602052604090205461250681612bdb565b612510908561385e565b935050808061251e906137a0565b9150506124e6565b505090565b60006125368261241e565b61259a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732315073693a206f70657261746f7220717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610a60565b60006125a58361138f565b9050806001600160a01b0316846001600160a01b031614806125e05750836001600160a01b03166125d5846109f5565b6001600160a01b0316145b806122135750612213818561221b565b60005460ff16156126135760405162461bcd60e51b8152600401610a60906137f2565b60008061261f83612858565b91509150846001600160a01b0316826001600160a01b0316146126995760405162461bcd60e51b815260206004820152602c60248201527f4552433732315073693a207472616e73666572206f6620746f6b656e2074686160448201526b3a1034b9903737ba1037bbb760a11b6064820152608401610a60565b6001600160a01b0384166126ff5760405162461bcd60e51b815260206004820152602760248201527f4552433732315073693a207472616e7366657220746f20746865207a65726f206044820152666164647265737360c81b6064820152608401610a60565b61270a60008461245d565b600061271784600161385e565b600881901c600090815260016020526040902054909150600160ff1b60ff83161c16158015612747575060035481105b1561277e57600081815260066020526040902080546001600160a01b0319166001600160a01b03881617905561277e600182612bf5565b600084815260066020526040902080546001600160a01b0319166001600160a01b0387161790558184146127b7576127b7600185612bf5565b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b611356828260405180602001604052806000815250612c21565b80341115611e2457336108fc6128308334613700565b6040518115909202916000818181858888f19350505050158015611356573d6000803e3d6000fd5b6000806128648361241e565b6128c55760405162461bcd60e51b815260206004820152602c60248201527f4552433732315073693a206f776e657220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a60565b6128ce83612c3c565b6000818152600660205260409020546001600160a01b031694909350915050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008261294e8584612c49565b14949350505050565b60006129628261138f565b905061296f600283612bf5565b60405182906000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6129b68484846125f0565b6129c4848484600185612cb5565b611d505760405162461bcd60e51b8152600401610a60906139a2565b60005460ff1615612a035760405162461bcd60e51b8152600401610a60906137f2565b6000805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a383390565b6040516001600160a01b03909116815260200160405180910390a1565b60005460ff16612a9e5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610a60565b6000805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612a38565b606060128054610972906136af565b606081612b025750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612b2c5780612b16816137a0565b9150612b259050600a836139f7565b9150612b06565b6000816001600160401b03811115612b4657612b46613350565b6040519080825280601f01601f191660200182016040528015612b70576020820181803683370190505b5090505b841561221357612b85600183613700565b9150612b92600a86613a0b565b612b9d90603061385e565b60f81b818381518110612bb257612bb26138dc565b60200101906001600160f81b031916908160001a905350612bd4600a866139f7565b9450612b74565b60005b811561125c57600019820190911690600101612bde565b600881901c600090815260209290925260409091208054600160ff1b60ff9093169290921c9091179055565b600354612c2e8484612df8565b6129c4600085838686612cb5565b600061095d600183612f74565b600081815b8451811015611020576000858281518110612c6b57612c6b6138dc565b60200260200101519050808311612c915760008381526020829052604090209250612ca2565b600081815260208490526040902092505b5080612cad816137a0565b915050612c4e565b60006001600160a01b0385163b15612deb57506001835b612cd6848661385e565b811015612de557604051630a85bd0160e11b81526001600160a01b0387169063150b7a0290612d0f9033908b9086908990600401613a1f565b602060405180830381600087803b158015612d2957600080fd5b505af1925050508015612d59575060408051601f3d908101601f19168201909252612d5691810190613a5c565b60015b612db3573d808015612d87576040519150601f19603f3d011682016040523d82523d6000602084013e612d8c565b606091505b508051612dab5760405162461bcd60e51b8152600401610a60906139a2565b805181602001fd5b828015612dd057506001600160e01b03198116630a85bd0160e11b145b92505080612ddd816137a0565b915050612ccc565b50612def565b5060015b95945050505050565b60035481612e5e5760405162461bcd60e51b815260206004820152602d60248201527f4552433732315073693a207175616e74697479206d757374206265206772656160448201526c746572207468616e207a65726f60981b6064820152608401610a60565b6001600160a01b038316612ec05760405162461bcd60e51b815260206004820152602360248201527f4552433732315073693a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610a60565b8160076000828254612ed2919061385e565b9091555050600081815260066020526040902080546001600160a01b0319166001600160a01b038516179055612f09600182612bf5565b805b612f15838361385e565b811015611d505760405181906001600160a01b038616906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4612f5f81600161385e565b60035580612f6c816137a0565b915050612f0b565b600881901c60008181526020849052604081205490919060ff808516919082181c8015612fb957612fa481613069565b60ff168203600884901b17935050505061095d565b600083116130265760405162461bcd60e51b815260206004820152603460248201527f4269744d6170733a205468652073657420626974206265666f7265207468652060448201527334b73232bc103237b2b9b713ba1032bc34b9ba1760611b6064820152608401610a60565b5060001990910160008181526020869052604090205490919080156130645761304e81613069565b60ff0360ff16600884901b17935050505061095d565b612fb9565b60006040518061012001604052806101008152602001613a7a610100913960f87e818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff6130b2856130d3565b02901c815181106130c5576130c56138dc565b016020015160f81c92915050565b60008082116130e157600080fd5b5060008190031690565b8280546130f7906136af565b90600052602060002090601f016020900481019282613119576000855561315f565b82601f1061313257805160ff191683800117855561315f565b8280016001018555821561315f579182015b8281111561315f578251825591602001919060010190613144565b5061316b92915061316f565b5090565b5b8082111561316b5760008155600101613170565b6001600160e01b031981168114611e2457600080fd5b6000602082840312156131ac57600080fd5b813561125581613184565b60005b838110156131d25781810151838201526020016131ba565b83811115611d505750506000910152565b600081518084526131fb8160208601602086016131b7565b601f01601f19169290920160200192915050565b60208152600061125560208301846131e3565b60006020828403121561323457600080fd5b5035919050565b6001600160a01b0381168114611e2457600080fd5b6000806040838503121561326357600080fd5b823561326e8161323b565b946020939093013593505050565b60008060006060848603121561329157600080fd5b833561329c8161323b565b925060208401356132ac8161323b565b929592945050506040919091013590565b80356001600160401b038116811461125c57600080fd5b6000602082840312156132e657600080fd5b611255826132bd565b60006020828403121561330157600080fd5b81356112558161323b565b6020808252825182820181905260009190848201906040850190845b8181101561334457835183529284019291840191600101613328565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b038084111561338057613380613350565b604051601f8501601f19908116603f011681019082821181831017156133a8576133a8613350565b816040528093508581528686860111156133c157600080fd5b858560208301376000602087830101525050509392505050565b6000602082840312156133ed57600080fd5b81356001600160401b0381111561340357600080fd5b8201601f8101841361341457600080fd5b61221384823560208401613366565b60008060006040848603121561343857600080fd5b613441846132bd565b925060208401356001600160401b038082111561345d57600080fd5b818601915086601f83011261347157600080fd5b81358181111561348057600080fd5b8760208260051b850101111561349557600080fd5b6020830194508093505050509250925092565b600080604083850312156134bb57600080fd5b82356134c68161323b565b9150602083013580151581146134db57600080fd5b809150509250929050565b600080604083850312156134f957600080fd5b61326e836132bd565b6000806040838503121561351557600080fd5b50508035926020909101359150565b6000806000806080858703121561353a57600080fd5b84356135458161323b565b935060208501356135558161323b565b92506040850135915060608501356001600160401b0381111561357757600080fd5b8501601f8101871361358857600080fd5b61359787823560208401613366565b91505092959194509250565b803563ffffffff8116811461125c57600080fd5b600080600080608085870312156135cd57600080fd5b6135d6856135a3565b93506135e4602086016135a3565b92506135f2604086016135a3565b9150613600606086016135a3565b905092959194509250565b60008060006060848603121561362057600080fd5b613629846132bd565b92506020840135915061363e604085016135a3565b90509250925092565b6000806040838503121561365a57600080fd5b82356136658161323b565b915060208301356134db8161323b565b60008060006060848603121561368a57600080fd5b613693846132bd565b92506136a1602085016132bd565b915061363e604085016135a3565b600181811c908216806136c357607f821691505b602082108114156136e457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015613712576137126136ea565b500390565b60208082526034908201527f4552433732315073693a207472616e736665722063616c6c6572206973206e6f6040820152731d081bdddb995c881b9bdc88185c1c1c9bdd995960621b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006000198214156137b4576137b46136ea565b5060010190565b6020808252601e908201527f5468652063616c6c657220697320616e6f7468657220636f6e74726163740000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526022908201527f416d6f756e742073686f756c642062652067726561746572207468616e207a65604082015261726f60f01b606082015260800190565b60008219821115613871576138716136ea565b500190565b60006001600160401b038083168185168183048111821515161561389c5761389c6136ea565b02949350505050565b6020808252601f908201527f5061796d656e74206973206c6f776572207468616e206e656365737361727900604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60006001600160401b0380841680613922576139226138f2565b92169190910492915050565b60006001600160401b038381169083168181101561394e5761394e6136ea565b039392505050565b600083516139688184602088016131b7565b83519083019061397c8183602088016131b7565b01949350505050565b60006020828403121561399757600080fd5b81516112558161323b565b60208082526035908201527f4552433732315073693a207472616e7366657220746f206e6f6e20455243373260408201527418a932b1b2b4bb32b91034b6b83632b6b2b73a32b960591b606082015260800190565b600082613a0657613a066138f2565b500490565b600082613a1a57613a1a6138f2565b500690565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613a52908301846131e3565b9695505050505050565b600060208284031215613a6e57600080fd5b81516112558161318456fe0001020903110a19042112290b311a3905412245134d2a550c5d32651b6d3a7506264262237d468514804e8d2b95569d0d495ea533a966b11c886eb93bc176c9071727374353637324837e9b47af86c7155181ad4fd18ed32c9096db57d59ee30e2e4a6a5f92a6be3498aae067ddb2eb1d5989b56fd7baf33ca0c2ee77e5caf7ff0810182028303840444c545c646c7425617c847f8c949c48a4a8b087b8c0c816365272829aaec650acd0d28fdad4e22d6991bd97dfdcea58b4d6f29fede4f6fe0f1f2f3f4b5b6b607b8b93a3a7b7bf357199c5abcfd9e168bcdee9b3f1ecf5fd1e3e5a7a8aa2b670c4ced8bbe8f0f4fc3d79a1c3cde7effb78cce6facbf9f8a2646970667358221220b3fccfedb5acff6d1d42e4455420b721807c5ead68691c7f603e90f4179ec11264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isApprovedForAll(address,address)": {
        "notice": "Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 122,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_paused",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1176,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_batchHead",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(BitMap)3303_storage"
      },
      {
        "astId": 1179,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_burnedToken",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(BitMap)3303_storage"
      },
      {
        "astId": 1182,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "currentIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1184,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1186,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1190,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_owners",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1192,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_minted",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1196,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1202,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2383,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "saleConfig",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(SaleConfig)2380_storage"
      },
      {
        "astId": 2385,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "proxyRegistryAddress",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 2387,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "maxSupply",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2391,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "root",
        "offset": 0,
        "slot": "17",
        "type": "t_bytes32"
      },
      {
        "astId": 2393,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "18",
        "type": "t_string_storage"
      },
      {
        "astId": 2397,
        "contract": "contracts/MyBoredApe.sol:MyBoredApe",
        "label": "_amountMinted",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BitMap)3303_storage": {
        "encoding": "inplace",
        "label": "struct BitMaps.BitMap",
        "members": [
          {
            "astId": 3302,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "_data",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SaleConfig)2380_storage": {
        "encoding": "inplace",
        "label": "struct MyBoredApe.SaleConfig",
        "members": [
          {
            "astId": 2365,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "auctionSaleStartTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2367,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "publicSaleStartTime",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 2369,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "allowlistPrice",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2371,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "publicPrice",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 2373,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "publicSaleKey",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2375,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "auctionSaleAmountLimit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2377,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "preSaleAmountPerAddress",
            "offset": 4,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 2379,
            "contract": "contracts/MyBoredApe.sol:MyBoredApe",
            "label": "maxAmountPerAddress",
            "offset": 8,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}